Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.as_command.float", "doc.as_command.int", "doc.as_command.str", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.as_command.float.rst", "doc.as_command.int.rst", "doc.as_command.str.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "float Mode", "int Mode", "str Mode", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 17], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 22, 23], "an": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 22, 23], "object": [3, 7, 8, 13, 14, 16, 20, 22, 23], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 17, 18, 22], "rule": [3, 7, 22], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 15, 18, 22], "specifi": [0, 4, 5, 6, 7, 9, 11, 12, 16, 22, 23], "when": [3, 4, 7, 10, 11, 12, 14, 22], "creat": [2, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 22, 23], "If": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 17, 22, 23], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 22, 23], "do": [7, 11, 22], "care": [7, 18], "about": 7, "condit": [0, 7, 22], "other": [3, 4, 7, 8, 9, 12, 14, 22, 23], "than": [7, 12, 14, 22], "can": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 22], "simpli": [7, 14], "suppli": 7, "exampl": [0, 3, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 22, 23], "from_exampl": [2, 7, 10, 13, 17, 22, 23], "want": [0, 1, 2, 3, 4, 5, 7, 8, 12, 13, 14, 17, 23], "us": [0, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 16, 17, 19, 22, 23], "constructor": 7, "correspond": [7, 8, 22], "import": [2, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 22, 23], "factory_a": 7, "generated_a": 7, "next": [7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 22, 23], "assert": [7, 8, 9, 10, 11, 12, 13, 14, 18, 22], "isinst": [7, 8, 10, 12, 13, 14, 18, 22], "str": [0, 3, 7, 8, 10, 12, 13, 14, 16, 18, 21, 22, 23], "factory_b": 7, "randstr": [7, 8, 12, 16, 18, 22], "length": [6, 7, 8, 14, 16, 18, 22], "16": [7, 8, 16, 17], "generated_b": 7, "len": [0, 7, 12, 14, 18, 22], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 16, 17, 18], "argument": [7, 8, 9, 14, 19, 22], "nonetyp": 7, "There": [3, 7, 18], "dedic": 7, "function": [7, 8, 9, 13, 16, 22, 23], "const": [7, 22], "instead": [7, 8, 12, 14, 23], "none": [7, 14, 22, 23], "bool": [0, 7, 12, 22, 23], "randbool": [7, 12, 22], "true": [0, 1, 7, 8, 14, 17, 22, 23], "fals": [1, 7, 14, 22, 23], "int": [0, 4, 7, 8, 12, 13, 14, 17, 22], "randint": [7, 8, 12, 14, 16, 22], "integ": [4, 5, 6, 7, 14, 17, 23], "float": [0, 5, 7, 14, 20, 22], "randfloat": [4, 7, 22], "string": [3, 6, 7, 14, 17, 22, 23], "list": [1, 2, 3, 4, 5, 7, 13, 17, 18, 22], "randlist": [7, 12, 22], "tupl": [7, 22], "dict": [2, 7, 13, 17, 22, 23], "randdict": [7, 12, 14, 16, 22], "decim": [0, 4, 5, 7, 22], "randdecim": [7, 12, 16, 22], "datetim": [0, 7, 14, 17, 22], "randdatetim": [7, 22], "date": [0, 7, 14, 22], "randdat": [7, 22], "time": [0, 1, 2, 3, 4, 5, 7, 8, 12, 14, 17, 18, 22], "randtim": [7, 22], "timedelta": [0, 7, 17, 22], "randtimedelta": [7, 22], "candid": [4, 7], "or_non": [7, 22], "factory_nul": 7, "0": [1, 4, 5, 7, 8, 9, 12, 14, 16, 17, 18, 20, 22], "1": [4, 7, 9, 11, 12, 14, 17, 18, 20, 22], "get": [7, 16], "alwai": [7, 8, 12, 14], "return": [7, 8, 9, 18, 22, 23], "sever": [0, 3, 7], "method": [7, 17, 18], "determin": 7, "from": [7, 8, 9, 11, 16, 17, 23], "multipl": [1, 2, 4, 5, 7, 12, 22], "make": [7, 12, 17], "e": 7, "so": [1, 4, 5, 7, 10, 11, 14, 22], "boolean": [1, 7, 14], "_": 7, "rang": [4, 5, 6, 7], "10": [0, 1, 2, 4, 5, 7, 14, 16, 18, 22], "which": [1, 2, 3, 4, 5, 6, 7, 9, 12, 19, 22], "choos": [7, 22], "either": [7, 8], "each": [0, 1, 2, 3, 7, 8, 9, 14, 18, 22, 23], "result": [7, 22], "chosen": [7, 22], "one": [1, 2, 3, 4, 5, 7, 9, 11, 12, 17, 22], "specif": [0, 4, 7, 12, 15, 22], "randchoic": [7, 8, 9, 14, 17, 22], "allow": [7, 16, 22], "deni": 7, "same": [3, 7, 9, 12, 14, 16], "python": [0, 1, 2, 3, 4, 5, 6, 7, 10, 13, 16], "predefin": 7, "thi": [3, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 22, 23], "chang": [3, 7, 14, 22], "post_process": [7, 14, 16, 17, 22], "format": [0, 1, 2, 4, 5, 6, 7, 16, 22], "50000": [7, 22], "decimal_len": [7, 12, 16, 22], "2": [0, 4, 7, 9, 11, 12, 14, 16, 17, 22], "lambda": [7, 14, 16, 17, 22], "x": [7, 22], "f": [7, 8, 22], "12": [0, 7, 17, 22], "345": [7, 22], "67": [7, 22], "3": [0, 3, 6, 7, 11, 12, 13, 14, 22], "153": [7, 22], "21": [7, 22], "90": [7, 22], "etc": [7, 13, 22], "provid": 7, "also": [0, 2, 4, 7, 8, 10, 12, 13, 14, 16, 17, 18, 22], "context": [7, 22], "iter": [0, 7, 12, 17, 19, 22], "includ": [3, 4, 7, 14], "normal": [3, 7, 12, 22], "would": [7, 8, 9, 11, 12, 14, 17], "think": 7, "could": 7, "just": [1, 4, 5, 7, 13, 18], "directli": [7, 10, 22], "need": [7, 12], "itertool": 7, "uuid": [2, 7, 10, 13], "defin": [2, 3, 7, 22], "class": [7, 9, 14, 20, 22, 23], "mailaddressfactori": 7, "def": [7, 9, 17], "self": 7, "com": 7, "http": 7, "doc": 7, "org": 7, "librari": 7, "html": 7, "count": 7, "id": [7, 12, 14, 16, 23], "uuid4": [2, 7, 10, 13], "name": [2, 7, 8, 10, 13, 14, 16, 23], "mail": 7, "set": [7, 12], "endswith": 7, "by_cal": [7, 22], "by_iter": [7, 17, 22], "A": [7, 14, 22], "finit": 7, "onc": [7, 18], "termin": [7, 18], "cannot": [7, 14, 16, 22], "ani": [0, 7, 8, 9, 14, 20, 22, 23], "more": [0, 7, 22], "gener": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 18, 22, 23], "element": [3, 8, 14, 17, 19, 22], "randomli": [8, 12, 13, 14, 15, 19, 22, 23], "like": [1, 4, 5, 8, 9, 12, 14, 17, 22], "built": [8, 9, 14], "two": [3, 8, 9, 14], "wai": [8, 9, 14, 18], "code": [2, 8, 9, 10, 12, 14, 18], "look": [8, 9, 12, 14, 17], "dictitem": [8, 9, 11, 22], "sex": 8, "m": [0, 1, 2, 3, 4, 5, 6, 8, 10, 23], "ag": [2, 8, 10, 13, 14, 16], "kei": [8, 14, 18, 22], "exist": [3, 8, 11], "random": [8, 12, 15, 18, 22, 23], "100": [0, 4, 5, 8, 12], "9": 8, "As": [8, 14, 17, 19], "pass": [8, 13, 14, 22], "valu": [0, 1, 2, 4, 5, 6, 8, 9, 11, 14, 16, 17, 18, 19, 22, 23], "keyword": [8, 22], "By": [8, 9, 13, 14], "possibl": [8, 14, 16], "whether": 8, "dictionari": [8, 23], "abov": [3, 8, 11, 14, 17], "see": [0, 2, 7, 8, 10, 14, 17], "here": [8, 14, 15], "how": [8, 14, 19], "build": [8, 14, 19], "dictitemexampl": [8, 9, 20], "smith": 8, "22": 8, "Not": 8, "limit": 8, "given": [8, 12, 14, 17], "output": [0, 1, 2, 4, 5, 8, 16, 19], "similar": 8, "its": [8, 18, 22], "Or": 8, "wrap": 8, "mani": 12, "case": [1, 2, 12, 14, 16, 17], "becaus": 12, "tailor": 12, "applic": 12, "record": [2, 12, 14], "singl": [3, 12], "mai": [1, 2, 11, 12, 14, 18, 22], "appropri": 12, "rather": 12, "999_999": [12, 16], "price": [12, 16], "1000": [12, 16], "200": [12, 17], "record_list": 12, "th": 12, "longer": 12, "number": [4, 12, 22, 23], "repeat": [1, 2, 3, 4, 5, 12], "last": 12, "el_factori": 12, "4": [4, 12, 14], "therefor": 12, "typic": 12, "where": 12, "ha": 12, "mean": [12, 22], "onli": [11, 12, 22], "el": 12, "5": [1, 6, 12, 18, 22], "sure": 12, "map": [12, 22, 23], "piec": 12, "attribut": 12, "type": [0, 3, 9, 11, 12, 16, 19, 22, 23], "necessari": [1, 12], "separ": [2, 3, 12], "schema": 12, "sinc": [3, 12, 16], "omit": [2, 10, 12], "equal": [12, 22], "accept": [12, 22], "guarante": [11, 12], "try": 13, "step": [13, 17], "prepar": 13, "8": [6, 9, 13, 22], "newer": 13, "pip": 13, "command": [1, 3, 4, 5, 6, 10, 12, 13, 16, 19], "factori": [2, 13, 17, 19, 20, 23], "20": [0, 2, 10, 13, 14], "some": [7, 14, 15], "timelin": [15, 19], "data": [2, 11, 15, 19], "depend": [15, 19], "previou": [14, 15, 16, 19], "json": [1, 2, 3, 4, 15, 19], "modul": [16, 19], "18": 16, "64": 16, "value_json": 16, "dump": 16, "we": 16, "wosar5ajmwhngj72": 16, "51": [0, 16], "convert": [3, 14, 16], "default": [1, 4, 9, 14, 16, 22, 23], "583085": 16, "754": 16, "were": 16, "begin": 16, "v": [16, 18, 22], "non": 17, "pseudo": 17, "seri": 17, "iter_datetim": 17, "start": [17, 19], "nxt": 17, "while": [2, 17], "yield": 17, "iter_randomwalk": 17, "step_f": 17, "2022": [0, 17], "hour": 17, "locat": 17, "hourli": 17, "01": [0, 4, 17], "01t12": 17, "00": 17, "13": 17, "14": 17, "15": [4, 17], "seen": 17, "definit": [0, 2, 14, 17, 19, 22], "increas": 17, "exactli": 17, "differ": [3, 17], "randomwalk": 17, "thu": 17, "wa": [10, 17, 22], "d": 17, "isoformat": 17, "128": 18, "generated1": 18, "generated2": 18, "note": [14, 18], "low": 18, "probabl": [1, 4, 5, 9, 14, 18, 22], "thei": [14, 18, 22], "ident": 18, "usual": 18, "sugar": 18, "coat": 18, "syntax": 18, "although": [7, 18], "itself": 18, "cnt": 18, "generated_valu": 18, "dispos": 18, "must": [2, 18, 22], "regener": 18, "infinity_it": [18, 22], "foo": [18, 22], "bar": [18, 22], "k": [14, 18, 22], "zip": [18, 22], "warn": 18, "run": [2, 18, 19], "below": [2, 3, 18], "continu": 18, "indefinit": 18, "caus": 18, "infinit": 18, "loop": 18, "handl": 18, "packag": 19, "help": 19, "quick": 19, "instal": 19, "minim": 19, "construct": [19, 22], "nullabl": [14, 19], "union": [19, 22, 23], "choic": 19, "constanc": 19, "process": [1, 19, 22], "custom": [14, 19, 23], "detail": [3, 19], "individu": 19, "tip": 19, "usag": 19, "subpackag": 19, "submodul": 19, "index": 19, "except": 20, "prop_exist": [20, 22], "base": [14, 20, 21, 22, 23], "obj": 20, "sequenc": [20, 22], "factoryconstructionerror": [21, 22], "messag": 21, "properti": [21, 22], "item": [14, 22], "arg": 22, "kwd": 22, "abc": 22, "t": 22, "infin": [4, 22], "serv": 22, "NOT": 22, "size": 22, "paramet": [22, 23], "abstract": 22, "accord": [0, 22], "assembl": 22, "prob": 22, "rnd": [22, 23], "whose": [14, 22], "option": [12, 16, 19, 22, 23], "callabl": 22, "r": [1, 2, 3, 4, 5, 14, 22], "modifi": 22, "fromexamplecontext": 22, "path": 22, "custom_func": [14, 22, 23], "_customfunc": 22, "example_is_custom": [], "examples_stack": 22, "child": 22, "current_exampl": 22, "recurs": 22, "classmethod": [], "root": [], "func": 22, "It": [1, 2, 14, 22], "match": [22, 23], "execut": [0, 3, 10, 12, 16, 22], "first": 22, "new": 22, "recommend": 22, "receiv": 22, "kwarg": [22, 23], "futur": [14, 22], "updat": 22, "should": 22, "take": 22, "preced": 22, "over": 22, "rais": 22, "support": 22, "prop_tru": [1, 22], "inconsist": 22, "weight": [9, 22], "chose": [], "No": [2, 22], "minimum": [4, 5, 22], "maximum": [4, 5, 11, 22], "tzinfo": 22, "liter": 22, "fix": 22, "awar": 22, "correct": 22, "otherwis": 22, "supportsfloat": 22, "p_inf": 22, "n_inf": 22, "nan": [4, 22], "part": [4, 22], "posit": [4, 11, 22], "neg": [4, 22], "items_dict": 22, "hashabl": 22, "ignor": [14, 22], "_base": 22, "_list": 22, "items_list": 22, "charset": [6, 22], "charact": [6, 22], "timezon": [], "inform": [], "unit": 22, "atom": 22, "simplest": [1, 2, 4, 5, 6], "factory_definition_fil": [], "filenam": [2, 22], "instanc": [2, 23], "variabl": [2, 10], "print": 3, "repr": 3, "befor": 3, "standard": [3, 4], "after": [3, 4, 11], "being": 3, "For": [0, 3, 14, 23], "factory_def": [0, 2, 3, 10], "py": [0, 2, 3, 10], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 9, 12, 16], "redirect": 3, "featur": [3, 14], "shell": 3, "combin": 3, "describ": [0, 3, 10], "them": [2, 3, 10], "l": [1, 2, 3, 4, 5], "repeatedli": [3, 14], "ONE": 3, "contain": [1, 2, 3, 4, 5, 6, 14], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": [2, 3], "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 5, 7, 10], "far": 10, "load": 10, "runtim": 10, "written": [4, 10], "bound": 10, "save": 10, "under": 10, "your": 10, "from_pyfil": [10, 22], "extern": 19, "file": [0, 2, 19, 22], "pathlik": 22, "io": 22, "notimpl": 22, "behav": 22, "until": 22, "enumer": [7, 9], "randenum": [7, 22], "particular": [7, 14], "enum": [7, 22], "myenum": 9, "custom_chain_length": 22, "signal_terminate_custom": 22, "terminate_custom_chain": 22, "enum_cl": 22, "bias": 9, "elif": 9, "commonli": 7, "increment": [7, 14, 17, 22], "wish": 11, "initi": 11, "ad": 11, "databas": [2, 11, 14], "initial_valu": [11, 22], "101": 11, "31": 11, "102": 11, "103": 11, "fit": 11, "sign": 11, "32": 11, "bit": 11, "add": [17, 23], "auto": 17, "field": [17, 23], "special": 19, "sequenti": 22, "reach": 22, "reset": 22, "satisfi": [1, 4, 5, 14, 22], "sqlalchemi": [7, 8, 20], "enabl": [], "experiment": 14, "remov": 14, "significantli": 14, "variou": 14, "appli": 14, "mapped_column": 14, "orm": [14, 23], "declarative_bas": [14, 23], "user": [14, 23], "__tablename__": [14, 23], "primary_kei": [14, 23], "autoincr": [14, 23], "least": 14, "work": 14, "biginteg": 14, "numer": [4, 14], "text": 14, "timestamp": 14, "interv": 14, "doe": [4, 14], "all": [3, 14], "rdb": 14, "pleas": 14, "relationship": 14, "foreign": 14, "constraint": 14, "even": 14, "uniqu": [2, 14], "primari": 14, "duplic": 14, "known": 14, "greater": 14, "intuit": 14, "birthdai": 14, "problem": [4, 14], "check": 14, "shown": 2, "accomplish": [], "deriv": 23, "column": 23, "model": [8, 14, 23], "as_dict": [8, 14, 23], "factory_from_column": 23, "60": 14, "overridden": 14, "second": 14, "respect": 14, "for_exampl": [], "inspect": 14, "col": 14, "attr": 14, "override_column": 23, "obtain": [1, 2, 23], "independ": 14, "reiter": 14, "automat": 14, "manual": 14, "group_id": 14, "respond": 14, "regular": 14, "manag": 14, "order": 14, "actual": 14, "coe": [], "advanc": 14, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": 0, "2023": 0, "03": [0, 2], "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 10], "common": [0, 1, 2, 4, 5, 6], "mode": [3, 10, 19], "50": 1, "lower": 1, "program": [1, 4], "anoth": 1, "languag": [1, 4], "desir": 1, "point": 4, "p": 4, "inf": 4, "prob_p_inf": 4, "n": 4, "prob_n_inf": 4, "prob_nan": 4, "behavior": 4, "left": 4, "between": 4, "1e": 4, "have": 4, "abil": 4, "place": 4, "digit": 4, "repres": 4, "read": 4, "equival": 2, "test": 2, "util": 2, "o": 2, "out_001": 2, "out_002": 2}, "objects": {"": [[20, 0, 0, "-", "randog"]], "randog": [[20, 1, 1, "", "DictItemExample"], [20, 1, 1, "", "Example"], [21, 0, 0, "-", "exceptions"], [22, 0, 0, "-", "factory"], [23, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[20, 2, 1, "", "example"], [20, 2, 1, "", "prop_exists"]], "randog.exceptions": [[21, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[21, 4, 1, "", "message"]], "randog.factory": [[22, 1, 1, "", "DictItem"], [22, 1, 1, "", "Factory"], [22, 1, 1, "", "FromExampleContext"], [22, 6, 1, "", "by_callable"], [22, 6, 1, "", "by_iterator"], [22, 6, 1, "", "const"], [22, 6, 1, "", "from_example"], [22, 6, 1, "", "from_pyfile"], [22, 6, 1, "", "increment"], [22, 6, 1, "", "randbool"], [22, 6, 1, "", "randchoice"], [22, 6, 1, "", "randdate"], [22, 6, 1, "", "randdatetime"], [22, 6, 1, "", "randdecimal"], [22, 6, 1, "", "randdict"], [22, 6, 1, "", "randenum"], [22, 6, 1, "", "randfloat"], [22, 6, 1, "", "randint"], [22, 6, 1, "", "randlist"], [22, 6, 1, "", "randstr"], [22, 6, 1, "", "randtime"], [22, 6, 1, "", "randtimedelta"], [22, 6, 1, "", "union"]], "randog.factory.DictItem": [[22, 2, 1, "", "factory"], [22, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[22, 5, 1, "", "infinity_iter"], [22, 5, 1, "", "iter"], [22, 5, 1, "", "next"], [22, 5, 1, "", "or_none"], [22, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[22, 4, 1, "", "current_example"], [22, 4, 1, "", "custom_chain_length"], [22, 4, 1, "", "custom_funcs"], [22, 4, 1, "", "examples"], [22, 5, 1, "", "from_example"], [22, 4, 1, "", "path"], [22, 5, 1, "", "recursive"], [22, 4, 1, "", "rnd"], [22, 4, 1, "", "signal_terminate_custom"], [22, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[23, 6, 1, "", "custom"], [23, 6, 1, "", "factory"], [23, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 7, "factori": [7, 8, 9, 10, 11, 12, 14, 16, 18, 22], "gener": [7, 12, 14, 19], "random": [7, 17, 19], "valu": 7, "element": [7, 12], "type": [7, 14, 17], "nullabl": 7, "union": 7, "randomli": [7, 16], "choic": 7, "constanc": 7, "process": 7, "output": [3, 7], "custom": 7, "detail": [0, 7], "how": 7, "build": 7, "individu": [7, 14], "dict": [8, 14], "randdict": 8, "from_exampl": [8, 9, 12, 14], "list": 12, "each": 12, "length": 12, "tupl": 12, "quick": 13, "start": 13, "instal": 13, "minim": 13, "us": [13, 18], "tip": 15, "usag": 15, "creat": 16, "json": 16, "decim": 16, "e": 16, "t": 16, "c": 16, "string": 16, "timelin": 17, "data": 17, "depend": 17, "previou": 17, "chang": 17, "smpl_datetim": 17, "str": [6, 17], "As": 18, "iter": [3, 18], "obj": 19, "content": [19, 20], "indic": 19, "tabl": 19, "randog": [14, 20, 21, 22, 23], "packag": [20, 21, 22, 23], "subpackag": 20, "submodul": 20, "modul": 20, "except": 21, "run": 0, "command": 0, "format": 3, "file": [3, 10], "extern": 10, "definit": 10, "enum": 9, "randenum": 9, "special": 7, "increment": 11, "integ": 11, "from": 14, "sqlalchemi": [14, 23], "support": 14, "column": 14, "limit": 14, "model": [], "instanc": 14, "some": [], "field": 14, "specifi": 14, "mode": [0, 1, 2, 4, 5, 6], "argument": [0, 1, 2, 4, 5, 6], "option": [0, 1, 2, 3, 4, 5, 6], "byfil": 2, "common": 3, "bool": 1, "exampl": [1, 2, 4, 5, 6], "int": 5, "float": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"], [4, "arguments-and-options"], [5, "arguments-and-options"], [6, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"], [2, "examples"], [4, "examples"], [5, "examples"], [6, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "float Mode": [[4, "float-mode"]], "int Mode": [[5, "int-mode"]], "str Mode": [[6, "str-mode"]], "Construct Factories (generator of random values)": [[7, "construct-factories-generator-of-random-values"]], "Elemental types": [[7, "elemental-types"]], "Nullable": [[7, "nullable"]], "Union type": [[7, "union-type"]], "Randomly choice": [[7, "randomly-choice"]], "Constance": [[7, "constance"]], "Processing output": [[7, "processing-output"]], "Custom Factory": [[7, "custom-factory"]], "Details on how to build individual factories": [[7, "details-on-how-to-build-individual-factories"]], "Special Factory": [[7, "special-factory"]], "Dict factory": [[8, "dict-factory"]], "Factory by randdict": [[8, "factory-by-randdict"]], "Factory by from_example": [[8, "factory-by-from-example"], [9, "factory-by-from-example"], [12, "factory-by-from-example"], [14, "factory-by-from-example"]], "Enum factory": [[9, "enum-factory"]], "Factory by randenum": [[9, "factory-by-randenum"]], "External File Definition of Factory": [[10, "external-file-definition-of-factory"]], "Incremental integer factory": [[11, "incremental-integer-factory"]], "List factory": [[12, "list-factory"]], "Each elements": [[12, "each-elements"]], "Length": [[12, "length"]], "Generate tuple": [[12, "generate-tuple"]], "Quick start": [[13, "quick-start"]], "Installation": [[13, "installation"]], "Minimal use": [[13, "minimal-use"]], "Factory from sqlalchemy": [[14, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[14, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[14, "supported-column-type"]], "Limitations": [[14, "limitations"]], "Specify factories for individual fields": [[14, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[14, "generate-a-dict-instance"]], "Tips (Usage)": [[15, "tips-usage"]], "Create JSON randomly": [[16, "create-json-randomly"]], "Decimal e.t.c.": [[16, "decimal-e-t-c"]], "Factory of JSON string": [[16, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[17, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[17, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[18, "use-factories"]], "As iterator": [[18, "as-iterator"]], "random-obj-generator": [[19, "random-obj-generator"]], "Contents:": [[19, null]], "Indices and tables": [[19, "indices-and-tables"]], "randog package": [[20, "randog-package"]], "Subpackages and submodules": [[20, "subpackages-and-submodules"]], "Module contents": [[20, "module-randog"]], "randog.exceptions package": [[21, "module-randog.exceptions"]], "randog.factory package": [[22, "module-randog.factory"]], "randog.sqlalchemy package": [[23, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[20, "randog.DictItemExample"]], "example (class in randog)": [[20, "randog.Example"]], "example (randog.dictitemexample attribute)": [[20, "randog.DictItemExample.example"]], "module": [[20, "module-randog"], [21, "module-randog.exceptions"], [22, "module-randog.factory"], [23, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[20, "randog.DictItemExample.prop_exists"]], "randog": [[20, "module-randog"]], "factoryconstructionerror": [[21, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[21, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[21, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[22, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[22, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[22, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[22, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[22, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[22, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[22, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[22, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[22, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[22, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[22, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[22, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[22, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[22, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[22, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[22, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[22, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[22, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[22, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[22, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[22, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[22, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[22, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[22, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[22, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[22, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[22, "randog.factory.randlist"]], "randog.factory": [[22, "module-randog.factory"]], "randstr() (in module randog.factory)": [[22, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[22, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[22, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[22, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[22, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[22, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[22, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[23, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[23, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[23, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[23, "module-randog.sqlalchemy"]]}})