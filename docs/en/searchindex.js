Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.byfile", "doc.as_command.common_option", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "byfile Mode", "Common Options", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 3, 6, 7, 8, 10, 12, 13], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19], "an": [1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 18, 19], "object": [2, 3, 4, 9, 10, 12, 16, 18, 19], "The": [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 13, 14, 18], "rule": [2, 3, 18], "ar": [0, 1, 2, 3, 4, 8, 10, 11, 14, 18], "specifi": [0, 3, 5, 7, 8, 12, 18, 19], "when": [2, 3, 6, 7, 8, 10, 18], "creat": [1, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19], "If": [2, 3, 4, 5, 6, 7, 8, 10, 13, 18, 19], "you": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 18, 19], "do": [3, 7, 18], "care": [3, 14], "about": 3, "condit": [0, 3, 18], "other": [2, 3, 4, 5, 8, 10, 18, 19], "than": [3, 8, 10, 18], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18], "simpli": [3, 10], "suppli": 3, "exampl": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19], "from_exampl": [1, 3, 6, 9, 13, 18, 19], "want": [0, 2, 3, 4, 8, 9, 10, 13, 19], "us": [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 13, 15, 18, 19], "constructor": 3, "correspond": [3, 4, 18], "import": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 19], "factory_a": 3, "generated_a": 3, "next": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 18, 19], "assert": [3, 4, 5, 6, 7, 8, 9, 10, 14, 18], "isinst": [3, 4, 6, 8, 9, 10, 14, 18], "str": [0, 2, 3, 4, 6, 8, 9, 10, 12, 14, 17, 18, 19], "factory_b": 3, "randstr": [3, 4, 8, 12, 14, 18], "length": [3, 4, 10, 12, 14, 18], "16": [3, 4, 12, 13], "generated_b": 3, "len": [0, 3, 8, 10, 14, 18], "follow": [0, 1, 2, 3, 6, 7, 9, 10, 12, 13, 14], "argument": [3, 4, 5, 10, 15, 18], "nonetyp": 3, "There": [2, 3, 14], "dedic": 3, "function": [3, 4, 5, 9, 12, 18, 19], "const": [3, 18], "instead": [3, 4, 8, 10, 19], "none": [3, 10, 18, 19], "bool": [0, 3, 8, 18, 19], "randbool": [3, 8, 18], "true": [0, 3, 4, 10, 13, 18, 19], "fals": [3, 10, 18, 19], "int": [0, 3, 4, 8, 9, 10, 13, 18], "randint": [3, 4, 8, 10, 12, 18], "integ": [3, 10, 13, 19], "float": [0, 3, 10, 16, 18], "randfloat": [3, 18], "string": [2, 3, 10, 13, 18, 19], "list": [2, 3, 9, 13, 14, 18], "randlist": [3, 8, 18], "tupl": [3, 18], "dict": [3, 9, 13, 18, 19], "randdict": [3, 8, 10, 12, 18], "decim": [0, 3, 18], "randdecim": [3, 8, 12, 18], "datetim": [0, 3, 10, 13, 18], "randdatetim": [3, 18], "date": [0, 3, 10, 18], "randdat": [3, 18], "time": [0, 2, 3, 4, 8, 10, 13, 14, 18], "randtim": [3, 18], "timedelta": [0, 3, 13, 18], "randtimedelta": [3, 18], "candid": 3, "or_non": [3, 18], "factory_nul": 3, "0": [3, 4, 5, 8, 10, 12, 13, 14, 16, 18], "1": [3, 5, 7, 8, 10, 13, 14, 16, 18], "get": [3, 12], "alwai": [3, 4, 8, 10], "return": [3, 4, 5, 14, 18, 19], "sever": [0, 2, 3], "method": [3, 13, 14], "determin": 3, "from": [3, 4, 5, 7, 12, 13, 19], "multipl": [3, 8, 18], "make": [3, 8, 13], "e": 3, "so": [3, 6, 7, 10, 18], "boolean": [3, 10], "_": 3, "rang": 3, "10": [0, 3, 10, 12, 14, 18], "which": [2, 3, 5, 8, 15, 18], "choos": [3, 18], "either": [3, 4], "each": [0, 2, 3, 4, 5, 10, 14, 18, 19], "result": [3, 18], "chosen": [3, 18], "one": [2, 3, 5, 7, 8, 13, 18], "specif": [0, 3, 8, 11, 18], "randchoic": [3, 4, 5, 10, 13, 18], "allow": [3, 12, 18], "deni": 3, "same": [2, 3, 5, 8, 10, 12], "python": [0, 1, 2, 3, 6, 9, 12], "predefin": 3, "thi": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 18, 19], "chang": [2, 3, 10, 18], "post_process": [3, 10, 12, 13, 18], "format": [0, 3, 12, 18], "50000": [3, 18], "decimal_len": [3, 8, 12, 18], "2": [0, 3, 5, 7, 8, 10, 12, 13, 18], "lambda": [3, 10, 12, 13, 18], "x": [3, 18], "f": [3, 4, 18], "12": [0, 3, 13, 18], "345": [3, 18], "67": [3, 18], "3": [0, 2, 3, 7, 8, 9, 10, 18], "153": [3, 18], "21": [3, 18], "90": [3, 18], "etc": [3, 9, 18], "provid": 3, "also": [0, 1, 3, 4, 6, 8, 9, 10, 12, 13, 14, 18], "context": [3, 18], "iter": [0, 3, 8, 13, 15, 18], "includ": [2, 3, 10], "normal": [2, 3, 8, 18], "would": [3, 4, 5, 7, 8, 10, 13], "think": 3, "could": 3, "just": [3, 9, 14], "directli": [3, 6, 18], "need": [3, 8], "itertool": 3, "uuid": [1, 3, 6, 9], "defin": [1, 2, 3, 18], "class": [3, 5, 10, 16, 18, 19], "mailaddressfactori": 3, "def": [3, 5, 13], "self": 3, "com": 3, "http": 3, "doc": 3, "org": 3, "librari": 3, "html": 3, "count": 3, "id": [3, 8, 10, 12, 19], "uuid4": [1, 3, 6, 9], "name": [1, 3, 4, 6, 9, 10, 12, 19], "mail": 3, "set": [3, 8], "endswith": 3, "by_cal": [3, 18], "by_iter": [3, 13, 18], "A": [3, 10, 18], "finit": 3, "onc": [3, 14], "termin": [3, 14], "cannot": [3, 10, 12, 18], "ani": [0, 3, 4, 5, 10, 16, 18, 19], "more": [0, 3, 18], "gener": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 14, 18, 19], "element": [2, 4, 10, 13, 15, 18], "randomli": [4, 8, 9, 10, 11, 15, 18, 19], "like": [4, 5, 8, 10, 13, 18], "built": [4, 5, 10], "two": [2, 4, 5, 10], "wai": [4, 5, 10, 14], "code": [1, 4, 5, 6, 8, 10, 14], "look": [4, 5, 8, 10, 13], "dictitem": [4, 5, 7, 18], "sex": 4, "m": [0, 1, 2, 4, 6, 19], "ag": [1, 4, 6, 9, 10, 12], "kei": [4, 10, 14, 18], "exist": [2, 4, 7], "random": [4, 8, 11, 14, 18, 19], "100": [0, 4, 8], "9": 4, "As": [4, 10, 13, 15], "pass": [4, 9, 10, 18], "valu": [0, 1, 4, 5, 7, 10, 12, 13, 14, 15, 18, 19], "keyword": [4, 18], "By": [4, 5, 9, 10], "possibl": [4, 10, 12], "whether": 4, "dictionari": [4, 19], "abov": [2, 4, 7, 10, 13], "see": [0, 1, 3, 4, 6, 10, 13], "here": [4, 10, 11], "how": [4, 10, 15], "build": [4, 10, 15], "dictitemexampl": [4, 5, 16], "smith": 4, "22": 4, "Not": 4, "limit": 4, "given": [4, 8, 10, 13], "output": [0, 4, 12, 15], "similar": 4, "its": [4, 14, 18], "Or": 4, "wrap": 4, "mani": 8, "case": [8, 10, 12, 13], "becaus": 8, "tailor": 8, "applic": 8, "record": [8, 10], "singl": [2, 8], "mai": [7, 8, 10, 14, 18], "appropri": 8, "rather": 8, "999_999": [8, 12], "price": [8, 12], "1000": [8, 12], "200": [8, 13], "record_list": 8, "th": 8, "longer": 8, "number": [8, 18, 19], "repeat": [2, 8], "last": 8, "el_factori": 8, "4": [8, 10], "therefor": 8, "typic": 8, "where": 8, "ha": 8, "mean": [8, 18], "onli": [7, 8, 18], "el": 8, "5": [8, 14, 18], "sure": 8, "map": [8, 18, 19], "piec": 8, "attribut": 8, "type": [0, 2, 5, 7, 8, 12, 15, 18, 19], "necessari": 8, "separ": [2, 8], "schema": 8, "sinc": [2, 8, 12], "omit": [1, 6, 8], "equal": [8, 18], "accept": [8, 18], "guarante": [7, 8], "try": 9, "step": [9, 13], "prepar": 9, "8": [5, 9, 18], "newer": 9, "pip": 9, "command": [2, 6, 8, 9, 12, 15], "factori": [1, 9, 13, 15, 16, 19], "20": [0, 1, 6, 9, 10], "some": [3, 10, 11], "timelin": [11, 15], "data": [7, 11, 15], "depend": [11, 15], "previou": [10, 11, 12, 15], "json": [2, 11, 15], "modul": [12, 15], "18": 12, "64": 12, "value_json": 12, "dump": 12, "we": 12, "wosar5ajmwhngj72": 12, "51": [0, 12], "convert": [2, 10, 12], "default": [5, 10, 12, 18, 19], "583085": 12, "754": 12, "were": 12, "begin": 12, "v": [12, 14, 18], "non": 13, "pseudo": 13, "seri": 13, "iter_datetim": 13, "start": [13, 15], "nxt": 13, "while": 13, "yield": 13, "iter_randomwalk": 13, "step_f": 13, "2022": [0, 13], "hour": 13, "locat": 13, "hourli": 13, "01": [0, 13], "01t12": 13, "00": 13, "13": 13, "14": 13, "15": 13, "seen": 13, "definit": [0, 1, 10, 13, 15, 18], "increas": 13, "exactli": 13, "differ": [2, 13], "randomwalk": 13, "thu": 13, "wa": [6, 13, 18], "d": 13, "isoformat": 13, "128": 14, "generated1": 14, "generated2": 14, "note": [10, 14], "low": 14, "probabl": [5, 10, 14, 18], "thei": [10, 14, 18], "ident": 14, "usual": 14, "sugar": 14, "coat": 14, "syntax": 14, "although": [3, 14], "itself": 14, "cnt": 14, "generated_valu": 14, "dispos": 14, "must": [1, 14, 18], "regener": 14, "infinity_it": [14, 18], "foo": [14, 18], "bar": [14, 18], "k": [10, 14, 18], "zip": [14, 18], "warn": 14, "run": [1, 6, 14, 15], "below": [2, 14], "continu": 14, "indefinit": 14, "caus": 14, "infinit": 14, "loop": 14, "handl": 14, "packag": 15, "help": 15, "quick": 15, "instal": 15, "minim": 15, "construct": [15, 18], "nullabl": [10, 15], "union": [15, 18, 19], "choic": 15, "constanc": 15, "process": [15, 18], "custom": [10, 15, 19], "detail": [2, 15], "individu": 15, "tip": 15, "usag": 15, "subpackag": 15, "submodul": 15, "index": 15, "except": 16, "prop_exist": [16, 18], "base": [10, 16, 17, 18, 19], "obj": 16, "sequenc": [16, 18], "factoryconstructionerror": [17, 18], "messag": 17, "properti": [17, 18], "item": [10, 18], "arg": 18, "kwd": 18, "abc": 18, "t": 18, "infin": 18, "serv": 18, "NOT": 18, "size": 18, "paramet": [18, 19], "abstract": 18, "accord": [0, 18], "assembl": 18, "prob": 18, "rnd": [18, 19], "whose": [10, 18], "option": [8, 12, 15, 18, 19], "callabl": 18, "r": [2, 10, 18], "modifi": 18, "fromexamplecontext": 18, "path": 18, "custom_func": [10, 18, 19], "_customfunc": 18, "example_is_custom": [], "examples_stack": 18, "child": 18, "current_exampl": 18, "recurs": 18, "classmethod": [], "root": [], "func": 18, "It": [1, 10, 18], "match": [18, 19], "execut": [0, 2, 6, 8, 12, 18], "first": 18, "new": 18, "recommend": 18, "receiv": 18, "kwarg": [18, 19], "futur": [10, 18], "updat": 18, "should": 18, "take": 18, "preced": 18, "over": 18, "rais": 18, "support": 18, "prop_tru": 18, "inconsist": 18, "weight": [5, 18], "chose": [], "No": [1, 18], "minimum": 18, "maximum": [7, 18], "tzinfo": 18, "liter": 18, "fix": 18, "awar": 18, "correct": 18, "otherwis": 18, "supportsfloat": 18, "p_inf": 18, "n_inf": 18, "nan": 18, "part": 18, "posit": [7, 18], "neg": 18, "items_dict": 18, "hashabl": 18, "ignor": [10, 18], "_base": 18, "_list": 18, "items_list": 18, "charset": 18, "charact": 18, "timezon": [], "inform": [], "unit": 18, "atom": 18, "simplest": [], "factory_definition_fil": [], "filenam": [1, 18], "instanc": [1, 19], "variabl": [1, 6], "print": 2, "repr": 2, "befor": 2, "standard": 2, "after": [2, 7], "being": 2, "For": [0, 2, 10, 19], "factory_def": [0, 1, 2, 6], "py": [0, 1, 2, 6], "out": 2, "txt": 2, "veri": 2, "practic": 2, "thing": 2, "done": [2, 5, 8, 12], "redirect": 2, "featur": [2, 10], "shell": 2, "combin": 2, "describ": [0, 2, 6], "them": [2, 6], "l": 2, "repeatedli": [2, 10], "ONE": 2, "contain": [2, 10], "conform": 2, "On": 2, "hand": 2, "placehold": 2, "out_1": 2, "out_2": 2, "out_3": 2, "out_": 2, "out_0001": 2, "out_0002": 2, "out_0003": 2, "04": 2, "most": [3, 6], "far": 6, "load": 6, "runtim": 6, "written": 6, "bound": 6, "save": 6, "under": 6, "your": 6, "from_pyfil": [6, 18], "extern": 15, "file": [0, 1, 15, 18], "pathlik": 18, "io": 18, "notimpl": 18, "behav": 18, "until": 18, "enumer": [3, 5], "randenum": [3, 18], "particular": [3, 10], "enum": [3, 18], "myenum": 5, "custom_chain_length": 18, "signal_terminate_custom": 18, "terminate_custom_chain": 18, "enum_cl": 18, "bias": 5, "elif": 5, "commonli": 3, "increment": [3, 10, 13, 18], "wish": 7, "initi": 7, "ad": 7, "databas": [7, 10], "initial_valu": [7, 18], "101": 7, "31": 7, "102": 7, "103": 7, "fit": 7, "sign": 7, "32": 7, "bit": 7, "add": [13, 19], "auto": 13, "field": [13, 19], "special": 15, "sequenti": 18, "reach": 18, "reset": 18, "satisfi": [10, 18], "sqlalchemi": [3, 4, 16], "enabl": [], "experiment": 10, "remov": 10, "significantli": 10, "variou": 10, "appli": 10, "mapped_column": 10, "orm": [10, 19], "declarative_bas": [10, 19], "user": [10, 19], "__tablename__": [10, 19], "primary_kei": [10, 19], "autoincr": [10, 19], "least": 10, "work": 10, "biginteg": 10, "numer": 10, "text": 10, "timestamp": 10, "interv": 10, "doe": 10, "all": [2, 10], "rdb": 10, "pleas": 10, "relationship": 10, "foreign": 10, "constraint": 10, "even": 10, "uniqu": [1, 10], "primari": 10, "duplic": 10, "known": 10, "greater": 10, "intuit": 10, "birthdai": 10, "problem": 10, "check": 10, "shown": [], "accomplish": [], "deriv": 19, "column": 19, "model": [4, 10, 19], "as_dict": [4, 10, 19], "factory_from_column": 19, "60": 10, "overridden": 10, "second": 10, "respect": 10, "for_exampl": [], "inspect": 10, "col": 10, "attr": 10, "override_column": 19, "obtain": 19, "independ": 10, "reiter": 10, "automat": 10, "manual": 10, "group_id": 10, "respond": 10, "regular": 10, "manag": 10, "order": 10, "actual": 10, "coe": [], "advanc": 10, "basic": 0, "further": 0, "avail": [0, 1, 2], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": 0, "2023": 0, "03": 0, "43": 0, "110244": 0, "17h": 0, "byfil": [0, 2], "common": [0, 1], "mode": [2, 15]}, "objects": {"": [[16, 0, 0, "-", "randog"]], "randog": [[16, 1, 1, "", "DictItemExample"], [16, 1, 1, "", "Example"], [17, 0, 0, "-", "exceptions"], [18, 0, 0, "-", "factory"], [19, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[16, 2, 1, "", "example"], [16, 2, 1, "", "prop_exists"]], "randog.exceptions": [[17, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[17, 4, 1, "", "message"]], "randog.factory": [[18, 1, 1, "", "DictItem"], [18, 1, 1, "", "Factory"], [18, 1, 1, "", "FromExampleContext"], [18, 6, 1, "", "by_callable"], [18, 6, 1, "", "by_iterator"], [18, 6, 1, "", "const"], [18, 6, 1, "", "from_example"], [18, 6, 1, "", "from_pyfile"], [18, 6, 1, "", "increment"], [18, 6, 1, "", "randbool"], [18, 6, 1, "", "randchoice"], [18, 6, 1, "", "randdate"], [18, 6, 1, "", "randdatetime"], [18, 6, 1, "", "randdecimal"], [18, 6, 1, "", "randdict"], [18, 6, 1, "", "randenum"], [18, 6, 1, "", "randfloat"], [18, 6, 1, "", "randint"], [18, 6, 1, "", "randlist"], [18, 6, 1, "", "randstr"], [18, 6, 1, "", "randtime"], [18, 6, 1, "", "randtimedelta"], [18, 6, 1, "", "union"]], "randog.factory.DictItem": [[18, 2, 1, "", "factory"], [18, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[18, 5, 1, "", "infinity_iter"], [18, 5, 1, "", "iter"], [18, 5, 1, "", "next"], [18, 5, 1, "", "or_none"], [18, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[18, 4, 1, "", "current_example"], [18, 4, 1, "", "custom_chain_length"], [18, 4, 1, "", "custom_funcs"], [18, 4, 1, "", "examples"], [18, 5, 1, "", "from_example"], [18, 4, 1, "", "path"], [18, 5, 1, "", "recursive"], [18, 4, 1, "", "rnd"], [18, 4, 1, "", "signal_terminate_custom"], [18, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[19, 6, 1, "", "custom"], [19, 6, 1, "", "factory"], [19, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 3, "factori": [3, 4, 5, 6, 7, 8, 10, 12, 14, 18], "gener": [3, 8, 10, 15], "random": [3, 13, 15], "valu": 3, "element": [3, 8], "type": [3, 10, 13], "nullabl": 3, "union": 3, "randomli": [3, 12], "choic": 3, "constanc": 3, "process": 3, "output": [2, 3], "custom": 3, "detail": [0, 3], "how": 3, "build": 3, "individu": [3, 10], "dict": [4, 10], "randdict": 4, "from_exampl": [4, 5, 8, 10], "list": 8, "each": 8, "length": 8, "tupl": 8, "quick": 9, "start": 9, "instal": 9, "minim": 9, "us": [9, 14], "tip": 11, "usag": 11, "creat": 12, "json": 12, "decim": 12, "e": 12, "t": 12, "c": 12, "string": 12, "timelin": 13, "data": 13, "depend": 13, "previou": 13, "chang": 13, "smpl_datetim": 13, "str": 13, "As": 14, "iter": [2, 14], "obj": 15, "content": [15, 16], "indic": 15, "tabl": 15, "randog": [10, 16, 17, 18, 19], "packag": [16, 17, 18, 19], "subpackag": 16, "submodul": 16, "modul": 16, "except": 17, "run": 0, "command": 0, "format": 2, "file": [2, 6], "extern": 6, "definit": 6, "enum": 5, "randenum": 5, "special": 3, "increment": 7, "integ": 7, "from": 10, "sqlalchemi": [10, 19], "support": 10, "column": 10, "limit": 10, "model": [], "instanc": 10, "some": [], "field": 10, "specifi": 10, "mode": [0, 1], "argument": [0, 1], "option": [0, 1, 2], "byfil": 1, "common": 2}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "byfile Mode": [[1, "byfile-mode"]], "Common Options": [[2, "common-options"]], "Output format": [[2, "output-format"]], "Output to file": [[2, "output-to-file"]], "Iteration": [[2, "iteration"]], "Construct Factories (generator of random values)": [[3, "construct-factories-generator-of-random-values"]], "Elemental types": [[3, "elemental-types"]], "Nullable": [[3, "nullable"]], "Union type": [[3, "union-type"]], "Randomly choice": [[3, "randomly-choice"]], "Constance": [[3, "constance"]], "Processing output": [[3, "processing-output"]], "Custom Factory": [[3, "custom-factory"]], "Details on how to build individual factories": [[3, "details-on-how-to-build-individual-factories"]], "Special Factory": [[3, "special-factory"]], "Dict factory": [[4, "dict-factory"]], "Factory by randdict": [[4, "factory-by-randdict"]], "Factory by from_example": [[4, "factory-by-from-example"], [5, "factory-by-from-example"], [8, "factory-by-from-example"], [10, "factory-by-from-example"]], "Enum factory": [[5, "enum-factory"]], "Factory by randenum": [[5, "factory-by-randenum"]], "External File Definition of Factory": [[6, "external-file-definition-of-factory"]], "Incremental integer factory": [[7, "incremental-integer-factory"]], "List factory": [[8, "list-factory"]], "Each elements": [[8, "each-elements"]], "Length": [[8, "length"]], "Generate tuple": [[8, "generate-tuple"]], "Quick start": [[9, "quick-start"]], "Installation": [[9, "installation"]], "Minimal use": [[9, "minimal-use"]], "Factory from sqlalchemy": [[10, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[10, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[10, "supported-column-type"]], "Limitations": [[10, "limitations"]], "Specify factories for individual fields": [[10, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[10, "generate-a-dict-instance"]], "Tips (Usage)": [[11, "tips-usage"]], "Create JSON randomly": [[12, "create-json-randomly"]], "Decimal e.t.c.": [[12, "decimal-e-t-c"]], "Factory of JSON string": [[12, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[13, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[13, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[14, "use-factories"]], "As iterator": [[14, "as-iterator"]], "random-obj-generator": [[15, "random-obj-generator"]], "Contents:": [[15, null]], "Indices and tables": [[15, "indices-and-tables"]], "randog package": [[16, "randog-package"]], "Subpackages and submodules": [[16, "subpackages-and-submodules"]], "Module contents": [[16, "module-randog"]], "randog.exceptions package": [[17, "module-randog.exceptions"]], "randog.factory package": [[18, "module-randog.factory"]], "randog.sqlalchemy package": [[19, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[16, "randog.DictItemExample"]], "example (class in randog)": [[16, "randog.Example"]], "example (randog.dictitemexample attribute)": [[16, "randog.DictItemExample.example"]], "module": [[16, "module-randog"], [17, "module-randog.exceptions"], [18, "module-randog.factory"], [19, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[16, "randog.DictItemExample.prop_exists"]], "randog": [[16, "module-randog"]], "factoryconstructionerror": [[17, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[17, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[17, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[18, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[18, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[18, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[18, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[18, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[18, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[18, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[18, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[18, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[18, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[18, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[18, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[18, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[18, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[18, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[18, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[18, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[18, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[18, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[18, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[18, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[18, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[18, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[18, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[18, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[18, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[18, "randog.factory.randlist"]], "randog.factory": [[18, "module-randog.factory"]], "randstr() (in module randog.factory)": [[18, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[18, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[18, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[18, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[18, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[18, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[18, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[19, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[19, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[19, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[19, "module-randog.sqlalchemy"]]}})