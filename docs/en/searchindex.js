Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.as_command.date", "doc.as_command.datetime", "doc.as_command.decimal", "doc.as_command.float", "doc.as_command.int", "doc.as_command.str", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.as_command.date.rst", "doc.as_command.datetime.rst", "doc.as_command.decimal.rst", "doc.as_command.float.rst", "doc.as_command.int.rst", "doc.as_command.str.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "date Mode", "datetime Mode", "decimal Mode", "float Mode", "int Mode", "str Mode", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 19, 20], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 25, 26], "an": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 25, 26], "object": [3, 4, 5, 10, 11, 16, 17, 19, 23, 25, 26], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 25], "rule": [3, 10, 25], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 21, 25], "specifi": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 19, 25, 26], "when": [3, 6, 7, 10, 13, 14, 15, 17, 25], "creat": [2, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26], "If": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 20, 25, 26], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26], "do": [10, 14, 25], "care": [10, 21], "about": 10, "condit": [0, 10, 25], "other": [3, 7, 10, 11, 12, 15, 17, 25, 26], "than": [5, 10, 15, 17, 25], "can": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25], "simpli": [10, 17], "suppli": 10, "exampl": [0, 3, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 25, 26], "from_exampl": [2, 10, 13, 16, 20, 25, 26], "want": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 16, 17, 20, 26], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 19, 20, 22, 25, 26], "constructor": 10, "correspond": [10, 11, 25], "import": [2, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26], "factory_a": 10, "generated_a": 10, "next": [10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 25, 26], "assert": [10, 11, 12, 13, 14, 15, 16, 17, 21, 25], "isinst": [10, 11, 13, 15, 16, 17, 21, 25], "str": [0, 3, 10, 11, 13, 15, 16, 17, 19, 21, 24, 25, 26], "factory_b": 10, "randstr": [10, 11, 15, 19, 21, 25], "length": [6, 9, 10, 11, 17, 19, 21, 25], "16": [10, 11, 19, 20], "generated_b": 10, "len": [0, 6, 10, 15, 17, 21, 25], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 17, 19, 20, 21], "argument": [10, 11, 12, 17, 22, 25], "nonetyp": 10, "There": [3, 10, 21], "dedic": 10, "function": [10, 11, 12, 16, 19, 25, 26], "const": [10, 25], "instead": [10, 11, 15, 17, 26], "none": [10, 17, 25, 26], "bool": [0, 10, 15, 25, 26], "randbool": [10, 15, 25], "true": [0, 1, 10, 11, 17, 20, 25, 26], "fals": [1, 10, 17, 25, 26], "int": [0, 7, 10, 11, 15, 16, 17, 20, 25], "randint": [10, 11, 15, 17, 19, 25], "integ": [7, 8, 9, 10, 17, 20, 26], "float": [0, 8, 10, 17, 23, 25], "randfloat": [7, 10, 25], "string": [3, 9, 10, 17, 20, 25, 26], "list": [1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 20, 21, 25], "randlist": [10, 15, 25], "tupl": [10, 25], "dict": [2, 10, 16, 20, 25, 26], "randdict": [10, 15, 17, 19, 25], "decim": [0, 7, 8, 10, 25], "randdecim": [6, 10, 15, 19, 25], "datetim": [0, 4, 10, 17, 20, 25], "randdatetim": [5, 10, 25], "date": [0, 5, 10, 17, 25], "randdat": [4, 10, 25], "time": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 15, 17, 20, 21, 25], "randtim": [10, 25], "timedelta": [0, 5, 10, 20, 25], "randtimedelta": [10, 25], "candid": [6, 7, 10], "or_non": [10, 25], "factory_nul": 10, "0": [1, 6, 7, 8, 10, 11, 12, 15, 17, 19, 20, 21, 23, 25], "1": [6, 7, 10, 12, 14, 15, 17, 20, 21, 23, 25], "get": [10, 19], "alwai": [10, 11, 15, 17], "return": [10, 11, 12, 21, 25, 26], "sever": [0, 3, 10], "method": [10, 20, 21], "determin": 10, "from": [10, 11, 12, 14, 19, 20, 26], "multipl": [1, 2, 4, 5, 6, 7, 8, 10, 15, 25], "make": [10, 15, 20], "e": 10, "so": [1, 4, 5, 6, 7, 8, 10, 13, 14, 17, 25], "boolean": [1, 10, 17], "_": 10, "rang": [4, 5, 6, 7, 8, 9, 10], "10": [0, 1, 2, 4, 5, 6, 7, 8, 10, 17, 19, 21, 25], "which": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 22, 25], "choos": [10, 25], "either": [10, 11], "each": [0, 1, 2, 3, 10, 11, 12, 17, 21, 25, 26], "result": [10, 25], "chosen": [10, 25], "one": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 20, 25], "specif": [0, 4, 5, 6, 7, 10, 15, 18, 25], "randchoic": [10, 11, 12, 17, 20, 25], "allow": [10, 19, 25], "deni": 10, "same": [3, 10, 12, 15, 17, 19], "python": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 16, 19], "predefin": 10, "thi": [3, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 25, 26], "chang": [3, 4, 5, 10, 17, 25], "post_process": [10, 17, 19, 20, 25], "format": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 19, 25], "50000": [10, 25], "decimal_len": [10, 15, 19, 25], "2": [0, 6, 7, 10, 12, 14, 15, 17, 19, 20, 25], "lambda": [10, 17, 19, 20, 25], "x": [10, 25], "f": [10, 11, 25], "12": [0, 10, 20, 25], "345": [10, 25], "67": [10, 25], "3": [0, 3, 9, 10, 14, 15, 16, 17, 25], "153": [10, 25], "21": [10, 25], "90": [10, 25], "etc": [10, 16, 25], "provid": 10, "also": [0, 2, 5, 7, 10, 11, 13, 15, 16, 17, 19, 20, 21, 25], "context": [10, 25], "iter": [0, 10, 15, 20, 22, 25], "includ": [3, 6, 7, 10, 17], "normal": [3, 10, 15, 25], "would": [10, 11, 12, 14, 15, 17, 20], "think": 10, "could": 10, "just": [1, 4, 5, 6, 7, 8, 10, 16, 21], "directli": [10, 13, 25], "need": [10, 15], "itertool": 10, "uuid": [2, 10, 13, 16], "defin": [2, 3, 10, 25], "class": [10, 12, 17, 23, 25, 26], "mailaddressfactori": 10, "def": [10, 12, 20], "self": 10, "com": 10, "http": 10, "doc": 10, "org": 10, "librari": 10, "html": 10, "count": 10, "id": [10, 15, 17, 19, 26], "uuid4": [2, 10, 13, 16], "name": [2, 10, 11, 13, 16, 17, 19, 26], "mail": 10, "set": [10, 15], "endswith": 10, "by_cal": [10, 25], "by_iter": [10, 20, 25], "A": [10, 17, 25], "finit": 10, "onc": [10, 21], "termin": [10, 21], "cannot": [10, 17, 19, 25], "ani": [0, 10, 11, 12, 17, 23, 25, 26], "more": [0, 10, 25], "gener": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 19, 20, 21, 25, 26], "element": [3, 11, 17, 20, 22, 25], "randomli": [11, 15, 16, 17, 18, 22, 25, 26], "like": [1, 4, 5, 6, 7, 8, 11, 12, 15, 17, 20, 25], "built": [11, 12, 17], "two": [3, 11, 12, 17], "wai": [11, 12, 17, 21], "code": [2, 11, 12, 13, 15, 17, 21], "look": [11, 12, 15, 17, 20], "dictitem": [11, 12, 14, 25], "sex": 11, "m": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 26], "ag": [2, 11, 13, 16, 17, 19], "kei": [11, 17, 21, 25], "exist": [3, 11, 14], "random": [11, 15, 18, 21, 25, 26], "100": [0, 6, 7, 8, 11, 15], "9": 11, "As": [11, 17, 20, 22], "pass": [11, 16, 17, 25], "valu": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 17, 19, 20, 21, 22, 25, 26], "keyword": [11, 25], "By": [4, 5, 11, 12, 16, 17], "possibl": [11, 17, 19], "whether": 11, "dictionari": [11, 26], "abov": [3, 11, 14, 17, 20], "see": [0, 2, 10, 11, 13, 17, 20], "here": [11, 17, 18], "how": [11, 17, 22], "build": [11, 17, 22], "dictitemexampl": [11, 12, 23], "smith": 11, "22": 11, "Not": 11, "limit": [6, 11], "given": [11, 15, 17, 20], "output": [0, 1, 2, 4, 5, 6, 7, 8, 11, 19, 22], "similar": 11, "its": [11, 21, 25], "Or": 11, "wrap": 11, "mani": 15, "case": [1, 2, 6, 15, 17, 19, 20], "becaus": 15, "tailor": 15, "applic": 15, "record": [2, 15, 17], "singl": [3, 15], "mai": [1, 2, 14, 15, 17, 21, 25], "appropri": 15, "rather": [5, 15], "999_999": [15, 19], "price": [15, 19], "1000": [6, 15, 19], "200": [15, 20], "record_list": 15, "th": 15, "longer": 15, "number": [6, 7, 15, 25, 26], "repeat": [1, 2, 3, 4, 5, 6, 7, 8, 15], "last": 15, "el_factori": 15, "4": [7, 15, 17], "therefor": 15, "typic": 15, "where": 15, "ha": 15, "mean": [15, 25], "onli": [5, 14, 15, 25], "el": 15, "5": [1, 9, 15, 21, 25], "sure": 15, "map": [15, 25, 26], "piec": 15, "attribut": 15, "type": [0, 3, 12, 14, 15, 19, 22, 25, 26], "necessari": [1, 15], "separ": [2, 3, 15], "schema": 15, "sinc": [3, 15, 19], "omit": [2, 13, 15], "equal": [15, 25], "accept": [15, 25], "guarante": [14, 15], "try": 16, "step": [16, 20], "prepar": 16, "8": [9, 12, 16, 25], "newer": 16, "pip": 16, "command": [1, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 19, 22], "factori": [2, 16, 20, 22, 23, 26], "20": [0, 2, 13, 16, 17], "some": [10, 17, 18], "timelin": [18, 22], "data": [2, 14, 18, 22], "depend": [18, 22], "previou": [17, 18, 19, 22], "json": [1, 2, 3, 4, 5, 6, 7, 18, 22], "modul": [19, 22], "18": 19, "64": 19, "value_json": 19, "dump": 19, "we": 19, "wosar5ajmwhngj72": 19, "51": [0, 19], "convert": [3, 17, 19], "default": [1, 4, 5, 6, 7, 12, 17, 19, 25, 26], "583085": 19, "754": 19, "were": 19, "begin": 19, "v": [19, 21, 25], "non": 20, "pseudo": 20, "seri": 20, "iter_datetim": 20, "start": [20, 22], "nxt": 20, "while": [2, 20], "yield": 20, "iter_randomwalk": 20, "step_f": 20, "2022": [0, 20], "hour": 20, "locat": 20, "hourli": 20, "01": [0, 4, 5, 6, 7, 20], "01t12": [5, 20], "00": [5, 20], "13": 20, "14": 20, "15": [6, 7, 20], "seen": 20, "definit": [0, 2, 17, 20, 22, 25], "increas": 20, "exactli": 20, "differ": [3, 20], "randomwalk": 20, "thu": 20, "wa": [13, 20, 25], "d": [4, 5, 20], "isoformat": 20, "128": 21, "generated1": 21, "generated2": 21, "note": [17, 21], "low": 21, "probabl": [1, 4, 5, 6, 7, 8, 12, 17, 21, 25], "thei": [17, 21, 25], "ident": 21, "usual": 21, "sugar": 21, "coat": 21, "syntax": 21, "although": [10, 21], "itself": 21, "cnt": 21, "generated_valu": 21, "dispos": 21, "must": [2, 21, 25], "regener": 21, "infinity_it": [21, 25], "foo": [21, 25], "bar": [21, 25], "k": [17, 21, 25], "zip": [21, 25], "warn": 21, "run": [2, 21, 22], "below": [2, 3, 21], "continu": 21, "indefinit": 21, "caus": 21, "infinit": 21, "loop": 21, "handl": 21, "packag": 22, "help": 22, "quick": 22, "instal": 22, "minim": 22, "construct": [22, 25], "nullabl": [17, 22], "union": [22, 25, 26], "choic": 22, "constanc": 22, "process": [1, 22, 25], "custom": [17, 22, 26], "detail": [3, 22], "individu": 22, "tip": 22, "usag": 22, "subpackag": 22, "submodul": 22, "index": 22, "except": 23, "prop_exist": [23, 25], "base": [17, 23, 24, 25, 26], "obj": 23, "sequenc": [23, 25], "factoryconstructionerror": [24, 25], "messag": 24, "properti": [24, 25], "item": [17, 25], "arg": 25, "kwd": 25, "abc": 25, "t": 25, "infin": [6, 7, 25], "serv": 25, "NOT": 25, "size": 25, "paramet": [25, 26], "abstract": 25, "accord": [0, 25], "assembl": 25, "prob": 25, "rnd": [25, 26], "whose": [17, 25], "option": [15, 19, 22, 25, 26], "callabl": 25, "r": [1, 2, 3, 4, 5, 6, 7, 8, 17, 25], "modifi": 25, "fromexamplecontext": 25, "path": 25, "custom_func": [17, 25, 26], "_customfunc": 25, "example_is_custom": [], "examples_stack": 25, "child": 25, "current_exampl": 25, "recurs": 25, "classmethod": [], "root": [], "func": 25, "It": [1, 2, 17, 25], "match": [25, 26], "execut": [0, 3, 13, 15, 19, 25], "first": 25, "new": 25, "recommend": 25, "receiv": 25, "kwarg": [25, 26], "futur": [17, 25], "updat": 25, "should": 25, "take": 25, "preced": 25, "over": 25, "rais": 25, "support": 25, "prop_tru": [1, 25], "inconsist": 25, "weight": [12, 25], "chose": [], "No": [2, 25], "minimum": [4, 5, 6, 7, 8, 25], "maximum": [4, 5, 6, 7, 8, 14, 25], "tzinfo": 25, "liter": 25, "fix": 25, "awar": 25, "correct": 25, "otherwis": 25, "supportsfloat": 25, "p_inf": 25, "n_inf": 25, "nan": [6, 7, 25], "part": [6, 7, 25], "posit": [6, 7, 14, 25], "neg": [6, 7, 25], "items_dict": 25, "hashabl": 25, "ignor": [17, 25], "_base": 25, "_list": 25, "items_list": 25, "charset": [9, 25], "charact": [9, 25], "timezon": [], "inform": [], "unit": 25, "atom": 25, "simplest": [1, 2, 4, 5, 6, 7, 8, 9], "factory_definition_fil": [], "filenam": [2, 25], "instanc": [2, 26], "variabl": [2, 13], "print": 3, "repr": 3, "befor": 3, "standard": [3, 4, 5, 7], "after": [3, 7, 14], "being": 3, "For": [0, 3, 17, 26], "factory_def": [0, 2, 3, 13], "py": [0, 2, 3, 13], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 12, 15, 19], "redirect": 3, "featur": [3, 17], "shell": 3, "combin": 3, "describ": [0, 3, 13], "them": [2, 3, 13], "l": [1, 2, 3, 4, 5, 6, 7, 8], "repeatedli": [3, 17], "ONE": 3, "contain": [1, 2, 3, 4, 5, 6, 7, 8, 9, 17], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": [2, 3], "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 5, 6, 7, 8, 10, 13], "far": 13, "load": 13, "runtim": 13, "written": [7, 13], "bound": 13, "save": 13, "under": 13, "your": 13, "from_pyfil": [13, 25], "extern": 22, "file": [0, 2, 22, 25], "pathlik": 25, "io": 25, "notimpl": 25, "behav": 25, "until": 25, "enumer": [10, 12], "randenum": [10, 25], "particular": [10, 17], "enum": [10, 25], "myenum": 12, "custom_chain_length": 25, "signal_terminate_custom": 25, "terminate_custom_chain": 25, "enum_cl": 25, "bias": 12, "elif": 12, "commonli": 10, "increment": [10, 17, 20, 25], "wish": 14, "initi": 14, "ad": 14, "databas": [2, 14, 17], "initial_valu": [14, 25], "101": 14, "31": [4, 14], "102": 14, "103": 14, "fit": 14, "sign": 14, "32": 14, "bit": 14, "add": [20, 26], "auto": 20, "field": [20, 26], "special": 22, "sequenti": 25, "reach": 25, "reset": 25, "satisfi": [1, 4, 5, 6, 7, 8, 17, 25], "sqlalchemi": [10, 11, 23], "enabl": [], "experiment": 17, "remov": 17, "significantli": 17, "variou": 17, "appli": 17, "mapped_column": 17, "orm": [17, 26], "declarative_bas": [17, 26], "user": [17, 26], "__tablename__": [17, 26], "primary_kei": [17, 26], "autoincr": [17, 26], "least": 17, "work": 17, "biginteg": 17, "numer": [7, 17], "text": 17, "timestamp": 17, "interv": 17, "doe": [7, 17], "all": [3, 17], "rdb": 17, "pleas": 17, "relationship": 17, "foreign": 17, "constraint": 17, "even": 17, "uniqu": [2, 17], "primari": 17, "duplic": 17, "known": 17, "greater": 17, "intuit": 17, "birthdai": 17, "problem": [7, 17], "check": 17, "shown": 2, "accomplish": [], "deriv": 26, "column": 26, "model": [11, 17, 26], "as_dict": [11, 17, 26], "factory_from_column": 26, "60": 17, "overridden": 17, "second": 17, "respect": 17, "for_exampl": [], "inspect": 17, "col": 17, "attr": 17, "override_column": 26, "obtain": [1, 2, 26], "independ": 17, "reiter": 17, "automat": 17, "manual": 17, "group_id": 17, "respond": 17, "regular": 17, "manag": 17, "order": 17, "actual": 17, "coe": [], "advanc": 17, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": [0, 6], "2023": 0, "03": [0, 2], "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 13], "common": [0, 1, 2, 4, 5, 6, 7, 8, 9], "mode": [3, 13, 22], "50": 1, "lower": 1, "program": [1, 7], "anoth": 1, "languag": [1, 7], "desir": 1, "point": [5, 7], "p": [6, 7], "inf": [6, 7], "prob_p_inf": [6, 7], "n": [6, 7], "prob_n_inf": [6, 7], "prob_nan": [6, 7], "behavior": [4, 5, 6, 7], "left": [4, 5, 6, 7], "between": [4, 5, 6, 7], "1e": [6, 7], "have": 7, "abil": 7, "place": [6, 7], "digit": 7, "repres": 7, "read": 7, "equival": 2, "test": 2, "util": 2, "o": 2, "out_001": 2, "out_002": 2, "decimal_length": 6, "often": 6, "245": 6, "iso": [4, 5], "fmt": [4, 5], "8601": [4, 5], "form": [4, 5], "strftime": [4, 5], "strptime": [4, 5], "2021": [4, 5], "01t00": 5, "y": [4, 5], "h": 5, "simultan": [4, 5], "elaps": 5, "certain": 5, "both": 4}, "objects": {"": [[23, 0, 0, "-", "randog"]], "randog": [[23, 1, 1, "", "DictItemExample"], [23, 1, 1, "", "Example"], [24, 0, 0, "-", "exceptions"], [25, 0, 0, "-", "factory"], [26, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[23, 2, 1, "", "example"], [23, 2, 1, "", "prop_exists"]], "randog.exceptions": [[24, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[24, 4, 1, "", "message"]], "randog.factory": [[25, 1, 1, "", "DictItem"], [25, 1, 1, "", "Factory"], [25, 1, 1, "", "FromExampleContext"], [25, 6, 1, "", "by_callable"], [25, 6, 1, "", "by_iterator"], [25, 6, 1, "", "const"], [25, 6, 1, "", "from_example"], [25, 6, 1, "", "from_pyfile"], [25, 6, 1, "", "increment"], [25, 6, 1, "", "randbool"], [25, 6, 1, "", "randchoice"], [25, 6, 1, "", "randdate"], [25, 6, 1, "", "randdatetime"], [25, 6, 1, "", "randdecimal"], [25, 6, 1, "", "randdict"], [25, 6, 1, "", "randenum"], [25, 6, 1, "", "randfloat"], [25, 6, 1, "", "randint"], [25, 6, 1, "", "randlist"], [25, 6, 1, "", "randstr"], [25, 6, 1, "", "randtime"], [25, 6, 1, "", "randtimedelta"], [25, 6, 1, "", "union"]], "randog.factory.DictItem": [[25, 2, 1, "", "factory"], [25, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[25, 5, 1, "", "infinity_iter"], [25, 5, 1, "", "iter"], [25, 5, 1, "", "next"], [25, 5, 1, "", "or_none"], [25, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[25, 4, 1, "", "current_example"], [25, 4, 1, "", "custom_chain_length"], [25, 4, 1, "", "custom_funcs"], [25, 4, 1, "", "examples"], [25, 5, 1, "", "from_example"], [25, 4, 1, "", "path"], [25, 5, 1, "", "recursive"], [25, 4, 1, "", "rnd"], [25, 4, 1, "", "signal_terminate_custom"], [25, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[26, 6, 1, "", "custom"], [26, 6, 1, "", "factory"], [26, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 10, "factori": [10, 11, 12, 13, 14, 15, 17, 19, 21, 25], "gener": [10, 15, 17, 22], "random": [10, 20, 22], "valu": 10, "element": [10, 15], "type": [10, 17, 20], "nullabl": 10, "union": 10, "randomli": [10, 19], "choic": 10, "constanc": 10, "process": 10, "output": [3, 10], "custom": 10, "detail": [0, 10], "how": 10, "build": 10, "individu": [10, 17], "dict": [11, 17], "randdict": 11, "from_exampl": [11, 12, 15, 17], "list": 15, "each": 15, "length": 15, "tupl": 15, "quick": 16, "start": 16, "instal": 16, "minim": 16, "us": [16, 21], "tip": 18, "usag": 18, "creat": 19, "json": 19, "decim": [6, 19], "e": 19, "t": 19, "c": 19, "string": 19, "timelin": 20, "data": 20, "depend": 20, "previou": 20, "chang": 20, "smpl_datetim": 20, "str": [9, 20], "As": 21, "iter": [3, 21], "obj": 22, "content": [22, 23], "indic": 22, "tabl": 22, "randog": [17, 23, 24, 25, 26], "packag": [23, 24, 25, 26], "subpackag": 23, "submodul": 23, "modul": 23, "except": 24, "run": 0, "command": 0, "format": 3, "file": [3, 13], "extern": 13, "definit": 13, "enum": 12, "randenum": 12, "special": 10, "increment": 14, "integ": 14, "from": 17, "sqlalchemi": [17, 26], "support": 17, "column": 17, "limit": 17, "model": [], "instanc": 17, "some": [], "field": 17, "specifi": 17, "mode": [0, 1, 2, 4, 5, 6, 7, 8, 9], "argument": [0, 1, 2, 4, 5, 6, 7, 8, 9], "option": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "byfil": 2, "common": 3, "bool": 1, "exampl": [1, 2, 4, 5, 6, 7, 8, 9], "int": 8, "float": 7, "datetim": 5, "date": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"], [4, "arguments-and-options"], [5, "arguments-and-options"], [6, "arguments-and-options"], [7, "arguments-and-options"], [8, "arguments-and-options"], [9, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"], [2, "examples"], [4, "examples"], [5, "examples"], [6, "examples"], [7, "examples"], [8, "examples"], [9, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "date Mode": [[4, "date-mode"]], "datetime Mode": [[5, "datetime-mode"]], "decimal Mode": [[6, "decimal-mode"]], "float Mode": [[7, "float-mode"]], "int Mode": [[8, "int-mode"]], "str Mode": [[9, "str-mode"]], "Construct Factories (generator of random values)": [[10, "construct-factories-generator-of-random-values"]], "Elemental types": [[10, "elemental-types"]], "Nullable": [[10, "nullable"]], "Union type": [[10, "union-type"]], "Randomly choice": [[10, "randomly-choice"]], "Constance": [[10, "constance"]], "Processing output": [[10, "processing-output"]], "Custom Factory": [[10, "custom-factory"]], "Details on how to build individual factories": [[10, "details-on-how-to-build-individual-factories"]], "Special Factory": [[10, "special-factory"]], "Dict factory": [[11, "dict-factory"]], "Factory by randdict": [[11, "factory-by-randdict"]], "Factory by from_example": [[11, "factory-by-from-example"], [12, "factory-by-from-example"], [15, "factory-by-from-example"], [17, "factory-by-from-example"]], "Enum factory": [[12, "enum-factory"]], "Factory by randenum": [[12, "factory-by-randenum"]], "External File Definition of Factory": [[13, "external-file-definition-of-factory"]], "Incremental integer factory": [[14, "incremental-integer-factory"]], "List factory": [[15, "list-factory"]], "Each elements": [[15, "each-elements"]], "Length": [[15, "length"]], "Generate tuple": [[15, "generate-tuple"]], "Quick start": [[16, "quick-start"]], "Installation": [[16, "installation"]], "Minimal use": [[16, "minimal-use"]], "Factory from sqlalchemy": [[17, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[17, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[17, "supported-column-type"]], "Limitations": [[17, "limitations"]], "Specify factories for individual fields": [[17, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[17, "generate-a-dict-instance"]], "Tips (Usage)": [[18, "tips-usage"]], "Create JSON randomly": [[19, "create-json-randomly"]], "Decimal e.t.c.": [[19, "decimal-e-t-c"]], "Factory of JSON string": [[19, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[20, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[20, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[21, "use-factories"]], "As iterator": [[21, "as-iterator"]], "random-obj-generator": [[22, "random-obj-generator"]], "Contents:": [[22, null]], "Indices and tables": [[22, "indices-and-tables"]], "randog package": [[23, "randog-package"]], "Subpackages and submodules": [[23, "subpackages-and-submodules"]], "Module contents": [[23, "module-randog"]], "randog.exceptions package": [[24, "module-randog.exceptions"]], "randog.factory package": [[25, "module-randog.factory"]], "randog.sqlalchemy package": [[26, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[23, "randog.DictItemExample"]], "example (class in randog)": [[23, "randog.Example"]], "example (randog.dictitemexample attribute)": [[23, "randog.DictItemExample.example"]], "module": [[23, "module-randog"], [24, "module-randog.exceptions"], [25, "module-randog.factory"], [26, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[23, "randog.DictItemExample.prop_exists"]], "randog": [[23, "module-randog"]], "factoryconstructionerror": [[24, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[24, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[24, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[25, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[25, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[25, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[25, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[25, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[25, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[25, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[25, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[25, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[25, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[25, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[25, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[25, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[25, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[25, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[25, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[25, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[25, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[25, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[25, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[25, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[25, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[25, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[25, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[25, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[25, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[25, "randog.factory.randlist"]], "randog.factory": [[25, "module-randog.factory"]], "randstr() (in module randog.factory)": [[25, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[25, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[25, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[25, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[25, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[25, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[25, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[26, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[26, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[26, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[26, "module-randog.sqlalchemy"]]}})