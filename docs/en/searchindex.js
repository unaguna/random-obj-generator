Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.as_command.decimal", "doc.as_command.float", "doc.as_command.int", "doc.as_command.str", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.as_command.decimal.rst", "doc.as_command.float.rst", "doc.as_command.int.rst", "doc.as_command.str.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "decimal Mode", "float Mode", "int Mode", "str Mode", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17, 18], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 23, 24], "an": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 23, 24], "object": [3, 8, 9, 14, 15, 17, 21, 23, 24], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 23], "rule": [3, 8, 23], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 19, 23], "specifi": [0, 4, 5, 6, 7, 8, 10, 12, 13, 17, 23, 24], "when": [3, 4, 5, 8, 11, 12, 13, 15, 23], "creat": [2, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 23, 24], "If": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 18, 23, 24], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 23, 24], "do": [8, 12, 23], "care": [8, 19], "about": 8, "condit": [0, 8, 23], "other": [3, 5, 8, 9, 10, 13, 15, 23, 24], "than": [8, 13, 15, 23], "can": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23], "simpli": [8, 15], "suppli": 8, "exampl": [0, 3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24], "from_exampl": [2, 8, 11, 14, 18, 23, 24], "want": [0, 1, 2, 3, 4, 5, 6, 8, 9, 13, 14, 15, 18, 24], "us": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 20, 23, 24], "constructor": 8, "correspond": [8, 9, 23], "import": [2, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 24], "factory_a": 8, "generated_a": 8, "next": [8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 24], "assert": [8, 9, 10, 11, 12, 13, 14, 15, 19, 23], "isinst": [8, 9, 11, 13, 14, 15, 19, 23], "str": [0, 3, 8, 9, 11, 13, 14, 15, 17, 19, 22, 23, 24], "factory_b": 8, "randstr": [8, 9, 13, 17, 19, 23], "length": [4, 7, 8, 9, 15, 17, 19, 23], "16": [8, 9, 17, 18], "generated_b": 8, "len": [0, 4, 8, 13, 15, 19, 23], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 17, 18, 19], "argument": [8, 9, 10, 15, 20, 23], "nonetyp": 8, "There": [3, 8, 19], "dedic": 8, "function": [8, 9, 10, 14, 17, 23, 24], "const": [8, 23], "instead": [8, 9, 13, 15, 24], "none": [8, 15, 23, 24], "bool": [0, 8, 13, 23, 24], "randbool": [8, 13, 23], "true": [0, 1, 8, 9, 15, 18, 23, 24], "fals": [1, 8, 15, 23, 24], "int": [0, 5, 8, 9, 13, 14, 15, 18, 23], "randint": [8, 9, 13, 15, 17, 23], "integ": [5, 6, 7, 8, 15, 18, 24], "float": [0, 6, 8, 15, 21, 23], "randfloat": [5, 8, 23], "string": [3, 7, 8, 15, 18, 23, 24], "list": [1, 2, 3, 4, 5, 6, 8, 14, 18, 19, 23], "randlist": [8, 13, 23], "tupl": [8, 23], "dict": [2, 8, 14, 18, 23, 24], "randdict": [8, 13, 15, 17, 23], "decim": [0, 5, 6, 8, 23], "randdecim": [4, 8, 13, 17, 23], "datetim": [0, 8, 15, 18, 23], "randdatetim": [8, 23], "date": [0, 8, 15, 23], "randdat": [8, 23], "time": [0, 1, 2, 3, 4, 5, 6, 8, 9, 13, 15, 18, 19, 23], "randtim": [8, 23], "timedelta": [0, 8, 18, 23], "randtimedelta": [8, 23], "candid": [4, 5, 8], "or_non": [8, 23], "factory_nul": 8, "0": [1, 4, 5, 6, 8, 9, 10, 13, 15, 17, 18, 19, 21, 23], "1": [4, 5, 8, 10, 12, 13, 15, 18, 19, 21, 23], "get": [8, 17], "alwai": [8, 9, 13, 15], "return": [8, 9, 10, 19, 23, 24], "sever": [0, 3, 8], "method": [8, 18, 19], "determin": 8, "from": [8, 9, 10, 12, 17, 18, 24], "multipl": [1, 2, 4, 5, 6, 8, 13, 23], "make": [8, 13, 18], "e": 8, "so": [1, 4, 5, 6, 8, 11, 12, 15, 23], "boolean": [1, 8, 15], "_": 8, "rang": [4, 5, 6, 7, 8], "10": [0, 1, 2, 4, 5, 6, 8, 15, 17, 19, 23], "which": [1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 20, 23], "choos": [8, 23], "either": [8, 9], "each": [0, 1, 2, 3, 8, 9, 10, 15, 19, 23, 24], "result": [8, 23], "chosen": [8, 23], "one": [1, 2, 3, 4, 5, 6, 8, 10, 12, 13, 18, 23], "specif": [0, 4, 5, 8, 13, 16, 23], "randchoic": [8, 9, 10, 15, 18, 23], "allow": [8, 17, 23], "deni": 8, "same": [3, 8, 10, 13, 15, 17], "python": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17], "predefin": 8, "thi": [3, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 23, 24], "chang": [3, 8, 15, 23], "post_process": [8, 15, 17, 18, 23], "format": [0, 1, 2, 4, 5, 6, 7, 8, 17, 23], "50000": [8, 23], "decimal_len": [8, 13, 17, 23], "2": [0, 4, 5, 8, 10, 12, 13, 15, 17, 18, 23], "lambda": [8, 15, 17, 18, 23], "x": [8, 23], "f": [8, 9, 23], "12": [0, 8, 18, 23], "345": [8, 23], "67": [8, 23], "3": [0, 3, 7, 8, 12, 13, 14, 15, 23], "153": [8, 23], "21": [8, 23], "90": [8, 23], "etc": [8, 14, 23], "provid": 8, "also": [0, 2, 5, 8, 9, 11, 13, 14, 15, 17, 18, 19, 23], "context": [8, 23], "iter": [0, 8, 13, 18, 20, 23], "includ": [3, 4, 5, 8, 15], "normal": [3, 8, 13, 23], "would": [8, 9, 10, 12, 13, 15, 18], "think": 8, "could": 8, "just": [1, 4, 5, 6, 8, 14, 19], "directli": [8, 11, 23], "need": [8, 13], "itertool": 8, "uuid": [2, 8, 11, 14], "defin": [2, 3, 8, 23], "class": [8, 10, 15, 21, 23, 24], "mailaddressfactori": 8, "def": [8, 10, 18], "self": 8, "com": 8, "http": 8, "doc": 8, "org": 8, "librari": 8, "html": 8, "count": 8, "id": [8, 13, 15, 17, 24], "uuid4": [2, 8, 11, 14], "name": [2, 8, 9, 11, 14, 15, 17, 24], "mail": 8, "set": [8, 13], "endswith": 8, "by_cal": [8, 23], "by_iter": [8, 18, 23], "A": [8, 15, 23], "finit": 8, "onc": [8, 19], "termin": [8, 19], "cannot": [8, 15, 17, 23], "ani": [0, 8, 9, 10, 15, 21, 23, 24], "more": [0, 8, 23], "gener": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18, 19, 23, 24], "element": [3, 9, 15, 18, 20, 23], "randomli": [9, 13, 14, 15, 16, 20, 23, 24], "like": [1, 4, 5, 6, 9, 10, 13, 15, 18, 23], "built": [9, 10, 15], "two": [3, 9, 10, 15], "wai": [9, 10, 15, 19], "code": [2, 9, 10, 11, 13, 15, 19], "look": [9, 10, 13, 15, 18], "dictitem": [9, 10, 12, 23], "sex": 9, "m": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 24], "ag": [2, 9, 11, 14, 15, 17], "kei": [9, 15, 19, 23], "exist": [3, 9, 12], "random": [9, 13, 16, 19, 23, 24], "100": [0, 4, 5, 6, 9, 13], "9": 9, "As": [9, 15, 18, 20], "pass": [9, 14, 15, 23], "valu": [0, 1, 2, 4, 5, 6, 7, 9, 10, 12, 15, 17, 18, 19, 20, 23, 24], "keyword": [9, 23], "By": [9, 10, 14, 15], "possibl": [9, 15, 17], "whether": 9, "dictionari": [9, 24], "abov": [3, 9, 12, 15, 18], "see": [0, 2, 8, 9, 11, 15, 18], "here": [9, 15, 16], "how": [9, 15, 20], "build": [9, 15, 20], "dictitemexampl": [9, 10, 21], "smith": 9, "22": 9, "Not": 9, "limit": [4, 9], "given": [9, 13, 15, 18], "output": [0, 1, 2, 4, 5, 6, 9, 17, 20], "similar": 9, "its": [9, 19, 23], "Or": 9, "wrap": 9, "mani": 13, "case": [1, 2, 4, 13, 15, 17, 18], "becaus": 13, "tailor": 13, "applic": 13, "record": [2, 13, 15], "singl": [3, 13], "mai": [1, 2, 12, 13, 15, 19, 23], "appropri": 13, "rather": 13, "999_999": [13, 17], "price": [13, 17], "1000": [4, 13, 17], "200": [13, 18], "record_list": 13, "th": 13, "longer": 13, "number": [4, 5, 13, 23, 24], "repeat": [1, 2, 3, 4, 5, 6, 13], "last": 13, "el_factori": 13, "4": [5, 13, 15], "therefor": 13, "typic": 13, "where": 13, "ha": 13, "mean": [13, 23], "onli": [12, 13, 23], "el": 13, "5": [1, 7, 13, 19, 23], "sure": 13, "map": [13, 23, 24], "piec": 13, "attribut": 13, "type": [0, 3, 10, 12, 13, 17, 20, 23, 24], "necessari": [1, 13], "separ": [2, 3, 13], "schema": 13, "sinc": [3, 13, 17], "omit": [2, 11, 13], "equal": [13, 23], "accept": [13, 23], "guarante": [12, 13], "try": 14, "step": [14, 18], "prepar": 14, "8": [7, 10, 14, 23], "newer": 14, "pip": 14, "command": [1, 3, 4, 5, 6, 7, 11, 13, 14, 17, 20], "factori": [2, 14, 18, 20, 21, 24], "20": [0, 2, 11, 14, 15], "some": [8, 15, 16], "timelin": [16, 20], "data": [2, 12, 16, 20], "depend": [16, 20], "previou": [15, 16, 17, 20], "json": [1, 2, 3, 4, 5, 16, 20], "modul": [17, 20], "18": 17, "64": 17, "value_json": 17, "dump": 17, "we": 17, "wosar5ajmwhngj72": 17, "51": [0, 17], "convert": [3, 15, 17], "default": [1, 4, 5, 10, 15, 17, 23, 24], "583085": 17, "754": 17, "were": 17, "begin": 17, "v": [17, 19, 23], "non": 18, "pseudo": 18, "seri": 18, "iter_datetim": 18, "start": [18, 20], "nxt": 18, "while": [2, 18], "yield": 18, "iter_randomwalk": 18, "step_f": 18, "2022": [0, 18], "hour": 18, "locat": 18, "hourli": 18, "01": [0, 4, 5, 18], "01t12": 18, "00": 18, "13": 18, "14": 18, "15": [4, 5, 18], "seen": 18, "definit": [0, 2, 15, 18, 20, 23], "increas": 18, "exactli": 18, "differ": [3, 18], "randomwalk": 18, "thu": 18, "wa": [11, 18, 23], "d": 18, "isoformat": 18, "128": 19, "generated1": 19, "generated2": 19, "note": [15, 19], "low": 19, "probabl": [1, 4, 5, 6, 10, 15, 19, 23], "thei": [15, 19, 23], "ident": 19, "usual": 19, "sugar": 19, "coat": 19, "syntax": 19, "although": [8, 19], "itself": 19, "cnt": 19, "generated_valu": 19, "dispos": 19, "must": [2, 19, 23], "regener": 19, "infinity_it": [19, 23], "foo": [19, 23], "bar": [19, 23], "k": [15, 19, 23], "zip": [19, 23], "warn": 19, "run": [2, 19, 20], "below": [2, 3, 19], "continu": 19, "indefinit": 19, "caus": 19, "infinit": 19, "loop": 19, "handl": 19, "packag": 20, "help": 20, "quick": 20, "instal": 20, "minim": 20, "construct": [20, 23], "nullabl": [15, 20], "union": [20, 23, 24], "choic": 20, "constanc": 20, "process": [1, 20, 23], "custom": [15, 20, 24], "detail": [3, 20], "individu": 20, "tip": 20, "usag": 20, "subpackag": 20, "submodul": 20, "index": 20, "except": 21, "prop_exist": [21, 23], "base": [15, 21, 22, 23, 24], "obj": 21, "sequenc": [21, 23], "factoryconstructionerror": [22, 23], "messag": 22, "properti": [22, 23], "item": [15, 23], "arg": 23, "kwd": 23, "abc": 23, "t": 23, "infin": [4, 5, 23], "serv": 23, "NOT": 23, "size": 23, "paramet": [23, 24], "abstract": 23, "accord": [0, 23], "assembl": 23, "prob": 23, "rnd": [23, 24], "whose": [15, 23], "option": [13, 17, 20, 23, 24], "callabl": 23, "r": [1, 2, 3, 4, 5, 6, 15, 23], "modifi": 23, "fromexamplecontext": 23, "path": 23, "custom_func": [15, 23, 24], "_customfunc": 23, "example_is_custom": [], "examples_stack": 23, "child": 23, "current_exampl": 23, "recurs": 23, "classmethod": [], "root": [], "func": 23, "It": [1, 2, 15, 23], "match": [23, 24], "execut": [0, 3, 11, 13, 17, 23], "first": 23, "new": 23, "recommend": 23, "receiv": 23, "kwarg": [23, 24], "futur": [15, 23], "updat": 23, "should": 23, "take": 23, "preced": 23, "over": 23, "rais": 23, "support": 23, "prop_tru": [1, 23], "inconsist": 23, "weight": [10, 23], "chose": [], "No": [2, 23], "minimum": [4, 5, 6, 23], "maximum": [4, 5, 6, 12, 23], "tzinfo": 23, "liter": 23, "fix": 23, "awar": 23, "correct": 23, "otherwis": 23, "supportsfloat": 23, "p_inf": 23, "n_inf": 23, "nan": [4, 5, 23], "part": [4, 5, 23], "posit": [4, 5, 12, 23], "neg": [4, 5, 23], "items_dict": 23, "hashabl": 23, "ignor": [15, 23], "_base": 23, "_list": 23, "items_list": 23, "charset": [7, 23], "charact": [7, 23], "timezon": [], "inform": [], "unit": 23, "atom": 23, "simplest": [1, 2, 4, 5, 6, 7], "factory_definition_fil": [], "filenam": [2, 23], "instanc": [2, 24], "variabl": [2, 11], "print": 3, "repr": 3, "befor": 3, "standard": [3, 5], "after": [3, 5, 12], "being": 3, "For": [0, 3, 15, 24], "factory_def": [0, 2, 3, 11], "py": [0, 2, 3, 11], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 10, 13, 17], "redirect": 3, "featur": [3, 15], "shell": 3, "combin": 3, "describ": [0, 3, 11], "them": [2, 3, 11], "l": [1, 2, 3, 4, 5, 6], "repeatedli": [3, 15], "ONE": 3, "contain": [1, 2, 3, 4, 5, 6, 7, 15], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": [2, 3], "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 5, 6, 8, 11], "far": 11, "load": 11, "runtim": 11, "written": [5, 11], "bound": 11, "save": 11, "under": 11, "your": 11, "from_pyfil": [11, 23], "extern": 20, "file": [0, 2, 20, 23], "pathlik": 23, "io": 23, "notimpl": 23, "behav": 23, "until": 23, "enumer": [8, 10], "randenum": [8, 23], "particular": [8, 15], "enum": [8, 23], "myenum": 10, "custom_chain_length": 23, "signal_terminate_custom": 23, "terminate_custom_chain": 23, "enum_cl": 23, "bias": 10, "elif": 10, "commonli": 8, "increment": [8, 15, 18, 23], "wish": 12, "initi": 12, "ad": 12, "databas": [2, 12, 15], "initial_valu": [12, 23], "101": 12, "31": 12, "102": 12, "103": 12, "fit": 12, "sign": 12, "32": 12, "bit": 12, "add": [18, 24], "auto": 18, "field": [18, 24], "special": 20, "sequenti": 23, "reach": 23, "reset": 23, "satisfi": [1, 4, 5, 6, 15, 23], "sqlalchemi": [8, 9, 21], "enabl": [], "experiment": 15, "remov": 15, "significantli": 15, "variou": 15, "appli": 15, "mapped_column": 15, "orm": [15, 24], "declarative_bas": [15, 24], "user": [15, 24], "__tablename__": [15, 24], "primary_kei": [15, 24], "autoincr": [15, 24], "least": 15, "work": 15, "biginteg": 15, "numer": [5, 15], "text": 15, "timestamp": 15, "interv": 15, "doe": [5, 15], "all": [3, 15], "rdb": 15, "pleas": 15, "relationship": 15, "foreign": 15, "constraint": 15, "even": 15, "uniqu": [2, 15], "primari": 15, "duplic": 15, "known": 15, "greater": 15, "intuit": 15, "birthdai": 15, "problem": [5, 15], "check": 15, "shown": 2, "accomplish": [], "deriv": 24, "column": 24, "model": [9, 15, 24], "as_dict": [9, 15, 24], "factory_from_column": 24, "60": 15, "overridden": 15, "second": 15, "respect": 15, "for_exampl": [], "inspect": 15, "col": 15, "attr": 15, "override_column": 24, "obtain": [1, 2, 24], "independ": 15, "reiter": 15, "automat": 15, "manual": 15, "group_id": 15, "respond": 15, "regular": 15, "manag": 15, "order": 15, "actual": 15, "coe": [], "advanc": 15, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": [0, 4], "2023": 0, "03": [0, 2], "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 11], "common": [0, 1, 2, 4, 5, 6, 7], "mode": [3, 11, 20], "50": 1, "lower": 1, "program": [1, 5], "anoth": 1, "languag": [1, 5], "desir": 1, "point": 5, "p": [4, 5], "inf": [4, 5], "prob_p_inf": [4, 5], "n": [4, 5], "prob_n_inf": [4, 5], "prob_nan": [4, 5], "behavior": [4, 5], "left": [4, 5], "between": [4, 5], "1e": [4, 5], "have": 5, "abil": 5, "place": [4, 5], "digit": 5, "repres": 5, "read": 5, "equival": 2, "test": 2, "util": 2, "o": 2, "out_001": 2, "out_002": 2, "decimal_length": 4, "often": 4, "245": 4}, "objects": {"": [[21, 0, 0, "-", "randog"]], "randog": [[21, 1, 1, "", "DictItemExample"], [21, 1, 1, "", "Example"], [22, 0, 0, "-", "exceptions"], [23, 0, 0, "-", "factory"], [24, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[21, 2, 1, "", "example"], [21, 2, 1, "", "prop_exists"]], "randog.exceptions": [[22, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[22, 4, 1, "", "message"]], "randog.factory": [[23, 1, 1, "", "DictItem"], [23, 1, 1, "", "Factory"], [23, 1, 1, "", "FromExampleContext"], [23, 6, 1, "", "by_callable"], [23, 6, 1, "", "by_iterator"], [23, 6, 1, "", "const"], [23, 6, 1, "", "from_example"], [23, 6, 1, "", "from_pyfile"], [23, 6, 1, "", "increment"], [23, 6, 1, "", "randbool"], [23, 6, 1, "", "randchoice"], [23, 6, 1, "", "randdate"], [23, 6, 1, "", "randdatetime"], [23, 6, 1, "", "randdecimal"], [23, 6, 1, "", "randdict"], [23, 6, 1, "", "randenum"], [23, 6, 1, "", "randfloat"], [23, 6, 1, "", "randint"], [23, 6, 1, "", "randlist"], [23, 6, 1, "", "randstr"], [23, 6, 1, "", "randtime"], [23, 6, 1, "", "randtimedelta"], [23, 6, 1, "", "union"]], "randog.factory.DictItem": [[23, 2, 1, "", "factory"], [23, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[23, 5, 1, "", "infinity_iter"], [23, 5, 1, "", "iter"], [23, 5, 1, "", "next"], [23, 5, 1, "", "or_none"], [23, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[23, 4, 1, "", "current_example"], [23, 4, 1, "", "custom_chain_length"], [23, 4, 1, "", "custom_funcs"], [23, 4, 1, "", "examples"], [23, 5, 1, "", "from_example"], [23, 4, 1, "", "path"], [23, 5, 1, "", "recursive"], [23, 4, 1, "", "rnd"], [23, 4, 1, "", "signal_terminate_custom"], [23, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[24, 6, 1, "", "custom"], [24, 6, 1, "", "factory"], [24, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 8, "factori": [8, 9, 10, 11, 12, 13, 15, 17, 19, 23], "gener": [8, 13, 15, 20], "random": [8, 18, 20], "valu": 8, "element": [8, 13], "type": [8, 15, 18], "nullabl": 8, "union": 8, "randomli": [8, 17], "choic": 8, "constanc": 8, "process": 8, "output": [3, 8], "custom": 8, "detail": [0, 8], "how": 8, "build": 8, "individu": [8, 15], "dict": [9, 15], "randdict": 9, "from_exampl": [9, 10, 13, 15], "list": 13, "each": 13, "length": 13, "tupl": 13, "quick": 14, "start": 14, "instal": 14, "minim": 14, "us": [14, 19], "tip": 16, "usag": 16, "creat": 17, "json": 17, "decim": [4, 17], "e": 17, "t": 17, "c": 17, "string": 17, "timelin": 18, "data": 18, "depend": 18, "previou": 18, "chang": 18, "smpl_datetim": 18, "str": [7, 18], "As": 19, "iter": [3, 19], "obj": 20, "content": [20, 21], "indic": 20, "tabl": 20, "randog": [15, 21, 22, 23, 24], "packag": [21, 22, 23, 24], "subpackag": 21, "submodul": 21, "modul": 21, "except": 22, "run": 0, "command": 0, "format": 3, "file": [3, 11], "extern": 11, "definit": 11, "enum": 10, "randenum": 10, "special": 8, "increment": 12, "integ": 12, "from": 15, "sqlalchemi": [15, 24], "support": 15, "column": 15, "limit": 15, "model": [], "instanc": 15, "some": [], "field": 15, "specifi": 15, "mode": [0, 1, 2, 4, 5, 6, 7], "argument": [0, 1, 2, 4, 5, 6, 7], "option": [0, 1, 2, 3, 4, 5, 6, 7], "byfil": 2, "common": 3, "bool": 1, "exampl": [1, 2, 4, 5, 6, 7], "int": 6, "float": 5}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"], [4, "arguments-and-options"], [5, "arguments-and-options"], [6, "arguments-and-options"], [7, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"], [2, "examples"], [4, "examples"], [5, "examples"], [6, "examples"], [7, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "decimal Mode": [[4, "decimal-mode"]], "float Mode": [[5, "float-mode"]], "int Mode": [[6, "int-mode"]], "str Mode": [[7, "str-mode"]], "Construct Factories (generator of random values)": [[8, "construct-factories-generator-of-random-values"]], "Elemental types": [[8, "elemental-types"]], "Nullable": [[8, "nullable"]], "Union type": [[8, "union-type"]], "Randomly choice": [[8, "randomly-choice"]], "Constance": [[8, "constance"]], "Processing output": [[8, "processing-output"]], "Custom Factory": [[8, "custom-factory"]], "Details on how to build individual factories": [[8, "details-on-how-to-build-individual-factories"]], "Special Factory": [[8, "special-factory"]], "Dict factory": [[9, "dict-factory"]], "Factory by randdict": [[9, "factory-by-randdict"]], "Factory by from_example": [[9, "factory-by-from-example"], [10, "factory-by-from-example"], [13, "factory-by-from-example"], [15, "factory-by-from-example"]], "Enum factory": [[10, "enum-factory"]], "Factory by randenum": [[10, "factory-by-randenum"]], "External File Definition of Factory": [[11, "external-file-definition-of-factory"]], "Incremental integer factory": [[12, "incremental-integer-factory"]], "List factory": [[13, "list-factory"]], "Each elements": [[13, "each-elements"]], "Length": [[13, "length"]], "Generate tuple": [[13, "generate-tuple"]], "Quick start": [[14, "quick-start"]], "Installation": [[14, "installation"]], "Minimal use": [[14, "minimal-use"]], "Factory from sqlalchemy": [[15, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[15, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[15, "supported-column-type"]], "Limitations": [[15, "limitations"]], "Specify factories for individual fields": [[15, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[15, "generate-a-dict-instance"]], "Tips (Usage)": [[16, "tips-usage"]], "Create JSON randomly": [[17, "create-json-randomly"]], "Decimal e.t.c.": [[17, "decimal-e-t-c"]], "Factory of JSON string": [[17, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[18, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[18, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[19, "use-factories"]], "As iterator": [[19, "as-iterator"]], "random-obj-generator": [[20, "random-obj-generator"]], "Contents:": [[20, null]], "Indices and tables": [[20, "indices-and-tables"]], "randog package": [[21, "randog-package"]], "Subpackages and submodules": [[21, "subpackages-and-submodules"]], "Module contents": [[21, "module-randog"]], "randog.exceptions package": [[22, "module-randog.exceptions"]], "randog.factory package": [[23, "module-randog.factory"]], "randog.sqlalchemy package": [[24, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[21, "randog.DictItemExample"]], "example (class in randog)": [[21, "randog.Example"]], "example (randog.dictitemexample attribute)": [[21, "randog.DictItemExample.example"]], "module": [[21, "module-randog"], [22, "module-randog.exceptions"], [23, "module-randog.factory"], [24, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[21, "randog.DictItemExample.prop_exists"]], "randog": [[21, "module-randog"]], "factoryconstructionerror": [[22, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[22, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[22, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[23, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[23, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[23, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[23, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[23, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[23, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[23, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[23, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[23, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[23, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[23, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[23, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[23, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[23, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[23, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[23, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[23, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[23, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[23, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[23, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[23, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[23, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[23, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[23, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[23, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[23, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[23, "randog.factory.randlist"]], "randog.factory": [[23, "module-randog.factory"]], "randstr() (in module randog.factory)": [[23, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[23, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[23, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[23, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[23, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[23, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[23, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[24, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[24, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[24, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[24, "module-randog.sqlalchemy"]]}})