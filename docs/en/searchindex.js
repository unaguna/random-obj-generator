Search.setIndex({"docnames": ["doc.as_command", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [0, 1, 4, 5, 6, 8, 10, 11], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13], "i": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 16, 17], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 16, 17], "object": [0, 1, 2, 7, 8, 10, 14, 16, 17], "The": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 16], "rule": [0, 1, 16], "ar": [0, 1, 2, 6, 8, 9, 12, 16], "specifi": [1, 3, 5, 6, 8, 10, 16, 17], "when": [0, 1, 4, 5, 6, 8, 16], "creat": [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17], "If": [0, 1, 2, 3, 4, 5, 6, 8, 11, 16, 17], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 16, 17], "do": [1, 5, 16], "care": [1, 12], "about": 1, "condit": [1, 16], "other": [0, 1, 2, 3, 6, 8, 16, 17], "than": [1, 6, 8, 16], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16], "simpli": [1, 8], "suppli": 1, "exampl": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17], "from_exampl": [0, 1, 4, 7, 11, 16, 17], "want": [0, 1, 2, 6, 7, 8, 11, 17], "us": [0, 1, 2, 3, 4, 6, 8, 10, 11, 13, 16, 17], "constructor": 1, "correspond": [1, 2, 16], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17], "factory_a": 1, "generated_a": 1, "next": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 17], "assert": [1, 2, 3, 4, 5, 6, 7, 8, 12, 16], "isinst": [1, 2, 4, 6, 7, 8, 12, 16], "str": [0, 1, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17], "factory_b": 1, "randstr": [1, 2, 6, 10, 12, 16], "length": [1, 2, 8, 10, 12, 16], "16": [1, 2, 10, 11], "generated_b": 1, "len": [1, 6, 8, 12, 16], "follow": [0, 1, 4, 5, 7, 8, 10, 11, 12], "argument": [0, 1, 2, 3, 8, 16], "nonetyp": 1, "There": [0, 1, 12], "dedic": 1, "function": [1, 2, 3, 7, 10, 16, 17], "const": [1, 16], "instead": [1, 2, 6, 8, 17], "none": [1, 8, 16, 17], "bool": [1, 6, 16, 17], "randbool": [1, 6, 16], "true": [1, 2, 8, 11, 16, 17], "fals": [1, 8, 16, 17], "int": [1, 2, 6, 7, 8, 11, 16], "randint": [1, 2, 6, 8, 10, 16], "integ": [1, 8, 11, 17], "float": [1, 8, 14, 16], "randfloat": [1, 16], "string": [0, 1, 8, 11, 16, 17], "list": [0, 1, 7, 11, 12, 16], "randlist": [1, 6, 16], "tupl": [1, 16], "dict": [1, 7, 11, 16, 17], "randdict": [1, 6, 8, 10, 16], "decim": [1, 16], "randdecim": [1, 6, 10, 16], "datetim": [1, 8, 11, 16], "randdatetim": [1, 16], "date": [1, 8, 16], "randdat": [1, 16], "time": [0, 1, 2, 6, 8, 11, 12, 16], "randtim": [1, 16], "timedelta": [1, 11, 16], "randtimedelta": [1, 16], "candid": 1, "or_non": [1, 16], "factory_nul": 1, "0": [1, 2, 3, 6, 8, 10, 11, 12, 14, 16], "1": [1, 3, 5, 6, 8, 11, 12, 14, 16], "get": [1, 10], "alwai": [1, 2, 6, 8], "return": [1, 2, 3, 12, 16, 17], "sever": 1, "method": [1, 11, 12], "determin": 1, "from": [1, 2, 3, 5, 10, 11, 17], "multipl": [1, 6, 16], "make": [1, 6, 11], "e": 1, "so": [1, 4, 5, 8, 16], "boolean": [1, 8], "_": 1, "rang": 1, "10": [1, 10, 12, 16], "which": [0, 1, 3, 6, 13, 16], "choos": [1, 16], "either": [1, 2], "each": [0, 1, 2, 3, 8, 12, 16, 17], "result": [1, 16], "chosen": [1, 16], "one": [0, 1, 3, 5, 6, 11, 16], "specif": [1, 6, 9, 16], "randchoic": [1, 2, 3, 11, 16], "allow": [1, 10, 16], "deni": 1, "same": [0, 1, 3, 6, 8, 10], "python": [0, 1, 4, 7, 10], "predefin": 1, "thi": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 16, 17], "chang": [0, 1, 8, 16], "post_process": [1, 8, 10, 11, 16], "format": [1, 10, 13, 16], "50000": [1, 16], "decimal_len": [1, 6, 10, 16], "2": [1, 3, 5, 6, 8, 10, 11, 16], "lambda": [1, 8, 10, 11, 16], "x": [1, 16], "f": [1, 2, 16], "12": [1, 11, 16], "345": [1, 16], "67": [1, 16], "3": [0, 1, 5, 6, 7, 16], "153": [1, 16], "21": [1, 16], "90": [1, 16], "etc": [1, 7, 16], "provid": 1, "also": [1, 2, 4, 6, 7, 8, 10, 11, 12, 16], "context": [1, 16], "iter": [1, 6, 11, 13, 16], "includ": [0, 1, 8], "normal": [0, 1, 6, 16], "would": [1, 2, 3, 5, 6, 8, 11], "think": 1, "could": 1, "just": [1, 7, 12], "directli": [1, 4, 16], "need": [1, 6], "itertool": 1, "uuid": [0, 1, 4, 7], "defin": [0, 1, 16], "class": [1, 3, 8, 14, 16, 17], "mailaddressfactori": 1, "def": [1, 3, 11], "self": 1, "com": 1, "http": 1, "doc": 1, "org": 1, "librari": 1, "html": 1, "count": 1, "id": [1, 6, 8, 10, 17], "uuid4": [0, 1, 4, 7], "name": [0, 1, 2, 4, 7, 8, 10, 17], "mail": 1, "set": [1, 6], "endswith": 1, "by_cal": [1, 16], "by_iter": [1, 11, 16], "A": [1, 8, 16], "finit": 1, "onc": [1, 12], "termin": [1, 12], "cannot": [1, 8, 10, 16], "ani": [1, 2, 3, 8, 14, 16, 17], "more": [1, 16], "gener": [0, 2, 3, 4, 5, 7, 10, 11, 12, 16, 17], "element": [0, 2, 8, 11, 13, 16], "randomli": [2, 6, 7, 8, 9, 13, 16, 17], "like": [2, 3, 6, 8, 11, 16], "built": [2, 3, 8], "two": [0, 2, 3, 8], "wai": [0, 2, 3, 8, 12], "code": [0, 2, 3, 4, 6, 8, 12], "look": [2, 3, 6, 8, 11], "dictitem": [2, 3, 5, 16], "sex": 2, "m": [0, 2, 4, 17], "ag": [0, 2, 4, 7, 8, 10], "kei": [2, 8, 12, 16], "exist": [0, 2, 5], "random": [2, 6, 9, 12, 16, 17], "100": [2, 6], "9": 2, "As": [2, 8, 11, 13], "pass": [2, 7, 8, 16], "valu": [2, 3, 5, 8, 10, 11, 12, 13, 16, 17], "keyword": [2, 16], "By": [2, 3, 7, 8], "possibl": [2, 10], "whether": 2, "dictionari": [2, 17], "abov": [0, 2, 5, 8, 11], "see": [1, 2, 4, 8, 11], "here": [2, 8, 9], "how": [2, 8, 13], "build": [2, 8, 13], "dictitemexampl": [2, 3, 14], "smith": 2, "22": 2, "Not": 2, "limit": 2, "given": [2, 6, 8, 11], "output": [2, 10, 13], "similar": 2, "its": [2, 12, 16], "Or": 2, "wrap": 2, "mani": 6, "case": [6, 8, 10, 11], "becaus": 6, "tailor": 6, "applic": 6, "record": 6, "singl": [0, 6], "mai": [5, 6, 8, 12, 16], "appropri": 6, "rather": 6, "999_999": [6, 10], "price": [6, 10], "1000": [6, 10], "200": [6, 11], "record_list": 6, "th": 6, "longer": 6, "number": [6, 16, 17], "repeat": [0, 6], "last": 6, "el_factori": 6, "4": [6, 8], "therefor": 6, "typic": 6, "where": 6, "ha": 6, "mean": [6, 16], "onli": [5, 6, 16], "el": 6, "5": [6, 12, 16], "sure": 6, "map": [6, 16, 17], "piec": 6, "attribut": 6, "type": [0, 3, 5, 6, 10, 13, 16, 17], "necessari": 6, "separ": [0, 6], "schema": 6, "sinc": [0, 6, 10], "omit": [0, 4, 6], "equal": [6, 16], "accept": [6, 16], "guarante": [5, 6], "try": 7, "step": [7, 11], "prepar": 7, "8": [3, 7, 16], "newer": 7, "pip": 7, "command": [4, 6, 7, 10, 13], "factori": [0, 7, 11, 13, 14, 17], "20": [0, 4, 7, 8], "some": [1, 9], "timelin": [9, 13], "data": [5, 9, 13], "depend": [9, 13], "previou": [8, 9, 10, 13], "json": [0, 9, 13], "modul": [10, 13], "18": 10, "64": 10, "value_json": 10, "dump": 10, "we": 10, "wosar5ajmwhngj72": 10, "51": 10, "convert": [0, 8, 10], "default": [3, 8, 10, 16, 17], "583085": 10, "754": 10, "were": 10, "begin": 10, "v": [10, 12, 16], "non": 11, "pseudo": 11, "seri": 11, "iter_datetim": 11, "start": [11, 13], "nxt": 11, "while": 11, "yield": 11, "iter_randomwalk": 11, "step_f": 11, "2022": 11, "hour": 11, "locat": 11, "hourli": 11, "01": 11, "01t12": 11, "00": 11, "13": 11, "14": 11, "15": 11, "seen": 11, "definit": [0, 11, 13, 16], "increas": 11, "exactli": 11, "differ": [0, 11], "randomwalk": 11, "thu": 11, "wa": [4, 11, 16], "d": 11, "isoformat": 11, "128": 12, "generated1": 12, "generated2": 12, "note": [8, 12], "low": 12, "probabl": [3, 8, 12, 16], "thei": [8, 12, 16], "ident": 12, "usual": 12, "sugar": 12, "coat": 12, "syntax": 12, "although": [1, 12], "itself": 12, "cnt": 12, "generated_valu": 12, "dispos": 12, "must": [0, 12, 16], "regener": 12, "infinity_it": [12, 16], "foo": [12, 16], "bar": [12, 16], "k": [8, 12, 16], "zip": [12, 16], "warn": 12, "run": [4, 12, 13], "below": [0, 12], "continu": 12, "indefinit": 12, "caus": 12, "infinit": 12, "loop": 12, "handl": 12, "packag": 13, "help": 13, "quick": 13, "instal": 13, "minim": 13, "construct": [13, 16], "nullabl": [8, 13], "union": [13, 16, 17], "choic": 13, "constanc": 13, "process": [13, 16], "custom": [8, 13, 17], "detail": [0, 13], "individu": 13, "tip": 13, "usag": 13, "subpackag": 13, "submodul": 13, "index": 13, "except": 14, "prop_exist": [14, 16], "base": [8, 14, 15, 16, 17], "obj": 14, "sequenc": [14, 16], "factoryconstructionerror": [15, 16], "messag": 15, "properti": [15, 16], "item": [8, 16], "arg": 16, "kwd": 16, "abc": 16, "t": 16, "infin": 16, "serv": 16, "NOT": 16, "size": 16, "paramet": [16, 17], "abstract": 16, "accord": 16, "assembl": 16, "prob": 16, "rnd": [16, 17], "whose": 16, "option": [0, 6, 10, 16, 17], "callabl": 16, "r": [0, 8, 16], "modifi": 16, "fromexamplecontext": 16, "path": 16, "custom_func": [8, 16, 17], "_customfunc": 16, "example_is_custom": [], "examples_stack": 16, "child": 16, "current_exampl": 16, "recurs": 16, "classmethod": [], "root": [], "func": 16, "It": [0, 8, 16], "match": [16, 17], "execut": [0, 4, 6, 10, 16], "first": 16, "new": 16, "recommend": 16, "receiv": 16, "kwarg": [16, 17], "futur": [8, 16], "updat": 16, "should": 16, "take": 16, "preced": 16, "over": 16, "rais": 16, "support": 16, "prop_tru": 16, "inconsist": 16, "weight": [3, 16], "chose": [], "No": 16, "minimum": 16, "maximum": [5, 16], "tzinfo": 16, "liter": 16, "fix": 16, "awar": 16, "correct": 16, "otherwis": 16, "supportsfloat": 16, "p_inf": 16, "n_inf": 16, "nan": 16, "part": 16, "posit": [5, 16], "neg": 16, "items_dict": 16, "hashabl": 16, "ignor": [8, 16], "_base": 16, "_list": 16, "items_list": 16, "charset": 16, "charact": 16, "timezon": 16, "inform": 16, "unit": 16, "atom": 16, "simplest": 0, "factory_definition_fil": 0, "filenam": [0, 16], "instanc": [0, 17], "variabl": [0, 4], "print": 0, "repr": 0, "befor": 0, "standard": 0, "after": [0, 5], "being": 0, "For": [0, 8, 17], "factory_def": [0, 4], "py": [0, 4], "out": 0, "txt": 0, "veri": 0, "practic": 0, "thing": 0, "done": [0, 3, 6, 10], "redirect": 0, "featur": [0, 8], "shell": 0, "combin": 0, "describ": [0, 4], "them": [0, 4], "l": 0, "repeatedli": [0, 8], "ONE": 0, "contain": [0, 8], "conform": 0, "On": 0, "hand": 0, "placehold": 0, "out_1": 0, "out_2": 0, "out_3": 0, "out_": 0, "out_0001": 0, "out_0002": 0, "out_0003": 0, "04": 0, "most": [1, 4], "far": 4, "load": 4, "runtim": 4, "written": 4, "bound": 4, "save": 4, "under": 4, "your": 4, "from_pyfil": [4, 16], "extern": 13, "file": [13, 16], "pathlik": 16, "io": 16, "notimpl": 16, "behav": 16, "until": 16, "enumer": [1, 3], "randenum": [1, 16], "particular": [1, 8], "enum": [1, 16], "myenum": 3, "custom_chain_length": 16, "signal_terminate_custom": 16, "terminate_custom_chain": 16, "enum_cl": 16, "bias": 3, "elif": 3, "commonli": 1, "increment": [1, 8, 11, 16], "wish": 5, "initi": 5, "ad": 5, "databas": 5, "initial_valu": [5, 16], "101": 5, "31": 5, "102": 5, "103": 5, "fit": 5, "sign": 5, "32": 5, "bit": 5, "add": [11, 17], "auto": 11, "field": [8, 11, 17], "special": 13, "sequenti": 16, "reach": 16, "reset": 16, "satisfi": 16, "sqlalchemi": [1, 2, 14], "enabl": [], "experiment": 8, "remov": 8, "significantli": 8, "variou": 8, "appli": 8, "mapped_column": 8, "orm": [8, 17], "declarative_bas": [8, 17], "user": [8, 17], "__tablename__": [8, 17], "primary_kei": [8, 17], "autoincr": [8, 17], "least": 8, "work": 8, "biginteg": 8, "numer": 8, "text": 8, "timestamp": 8, "interv": 8, "doe": 8, "all": 8, "rdb": 8, "pleas": 8, "relationship": 8, "foreign": 8, "constraint": 8, "even": 8, "uniqu": 8, "primari": 8, "duplic": 8, "known": 8, "greater": 8, "intuit": 8, "birthdai": 8, "problem": 8, "check": 8, "shown": [], "accomplish": [], "deriv": 17, "column": 17, "model": [2, 8, 17], "as_dict": [2, 8, 17], "factory_from_column": 17, "60": 8, "overridden": 8, "second": 8, "respect": 8, "for_exampl": [], "inspect": 8, "col": 8, "attr": 8, "override_column": 17, "obtain": 17, "independ": 8, "reiter": 8}, "objects": {"": [[14, 0, 0, "-", "randog"]], "randog": [[14, 1, 1, "", "DictItemExample"], [14, 1, 1, "", "Example"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "factory"], [17, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[14, 2, 1, "", "example"], [14, 2, 1, "", "prop_exists"]], "randog.exceptions": [[15, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[15, 4, 1, "", "message"]], "randog.factory": [[16, 1, 1, "", "DictItem"], [16, 1, 1, "", "Factory"], [16, 1, 1, "", "FromExampleContext"], [16, 6, 1, "", "by_callable"], [16, 6, 1, "", "by_iterator"], [16, 6, 1, "", "const"], [16, 6, 1, "", "from_example"], [16, 6, 1, "", "from_pyfile"], [16, 6, 1, "", "increment"], [16, 6, 1, "", "randbool"], [16, 6, 1, "", "randchoice"], [16, 6, 1, "", "randdate"], [16, 6, 1, "", "randdatetime"], [16, 6, 1, "", "randdecimal"], [16, 6, 1, "", "randdict"], [16, 6, 1, "", "randenum"], [16, 6, 1, "", "randfloat"], [16, 6, 1, "", "randint"], [16, 6, 1, "", "randlist"], [16, 6, 1, "", "randstr"], [16, 6, 1, "", "randtime"], [16, 6, 1, "", "randtimedelta"], [16, 6, 1, "", "union"]], "randog.factory.DictItem": [[16, 2, 1, "", "factory"], [16, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[16, 5, 1, "", "infinity_iter"], [16, 5, 1, "", "iter"], [16, 5, 1, "", "next"], [16, 5, 1, "", "or_none"], [16, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[16, 4, 1, "", "current_example"], [16, 4, 1, "", "custom_chain_length"], [16, 4, 1, "", "custom_funcs"], [16, 4, 1, "", "examples"], [16, 5, 1, "", "from_example"], [16, 4, 1, "", "path"], [16, 5, 1, "", "recursive"], [16, 4, 1, "", "rnd"], [16, 4, 1, "", "signal_terminate_custom"], [16, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[17, 6, 1, "", "custom"], [17, 6, 1, "", "factory"], [17, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 1, "factori": [1, 2, 3, 4, 5, 6, 8, 10, 12, 16], "gener": [1, 6, 8, 13], "random": [1, 11, 13], "valu": 1, "element": [1, 6], "type": [1, 8, 11], "nullabl": 1, "union": 1, "randomli": [1, 10], "choic": 1, "constanc": 1, "process": 1, "output": [0, 1], "custom": 1, "detail": 1, "how": 1, "build": 1, "individu": 1, "dict": [2, 8], "randdict": 2, "from_exampl": [2, 3, 6, 8], "list": 6, "each": 6, "length": 6, "tupl": 6, "quick": 7, "start": 7, "instal": 7, "minim": 7, "us": [7, 12], "tip": 9, "usag": 9, "creat": 10, "json": 10, "decim": 10, "e": 10, "t": 10, "c": 10, "string": 10, "timelin": 11, "data": 11, "depend": 11, "previou": 11, "chang": 11, "smpl_datetim": 11, "str": 11, "As": 12, "iter": [0, 12], "obj": 13, "content": [13, 14], "indic": 13, "tabl": 13, "randog": [8, 14, 15, 16, 17], "packag": [14, 15, 16, 17], "subpackag": 14, "submodul": 14, "modul": 14, "except": 15, "run": 0, "command": 0, "format": 0, "file": [0, 4], "extern": 4, "definit": 4, "enum": 3, "randenum": 3, "special": 1, "increment": 5, "integ": 5, "from": 8, "sqlalchemi": [8, 17], "support": 8, "column": 8, "limit": 8, "model": [], "instanc": 8}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Output format": [[0, "output-format"]], "Output to file": [[0, "output-to-file"]], "Iteration": [[0, "iteration"]], "Construct Factories (generator of random values)": [[1, "construct-factories-generator-of-random-values"]], "Elemental types": [[1, "elemental-types"]], "Nullable": [[1, "nullable"]], "Union type": [[1, "union-type"]], "Randomly choice": [[1, "randomly-choice"]], "Constance": [[1, "constance"]], "Processing output": [[1, "processing-output"]], "Custom Factory": [[1, "custom-factory"]], "Details on how to build individual factories": [[1, "details-on-how-to-build-individual-factories"]], "Special Factory": [[1, "special-factory"]], "Dict factory": [[2, "dict-factory"]], "Factory by randdict": [[2, "factory-by-randdict"]], "Factory by from_example": [[2, "factory-by-from-example"], [3, "factory-by-from-example"], [6, "factory-by-from-example"], [8, "factory-by-from-example"]], "Enum factory": [[3, "enum-factory"]], "Factory by randenum": [[3, "factory-by-randenum"]], "External File Definition of Factory": [[4, "external-file-definition-of-factory"]], "Incremental integer factory": [[5, "incremental-integer-factory"]], "List factory": [[6, "list-factory"]], "Each elements": [[6, "each-elements"]], "Length": [[6, "length"]], "Generate tuple": [[6, "generate-tuple"]], "Quick start": [[7, "quick-start"]], "Installation": [[7, "installation"]], "Minimal use": [[7, "minimal-use"]], "Factory from sqlalchemy": [[8, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[8, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[8, "supported-column-type"]], "Limitations": [[8, "limitations"]], "Generate a dict instance": [[8, "generate-a-dict-instance"]], "Tips (Usage)": [[9, "tips-usage"]], "Create JSON randomly": [[10, "create-json-randomly"]], "Decimal e.t.c.": [[10, "decimal-e-t-c"]], "Factory of JSON string": [[10, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[11, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[11, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[12, "use-factories"]], "As iterator": [[12, "as-iterator"]], "random-obj-generator": [[13, "random-obj-generator"]], "Contents:": [[13, null]], "Indices and tables": [[13, "indices-and-tables"]], "randog package": [[14, "randog-package"]], "Subpackages and submodules": [[14, "subpackages-and-submodules"]], "Module contents": [[14, "module-randog"]], "randog.exceptions package": [[15, "module-randog.exceptions"]], "randog.factory package": [[16, "module-randog.factory"]], "randog.sqlalchemy package": [[17, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[14, "randog.DictItemExample"]], "example (class in randog)": [[14, "randog.Example"]], "example (randog.dictitemexample attribute)": [[14, "randog.DictItemExample.example"]], "module": [[14, "module-randog"], [15, "module-randog.exceptions"], [16, "module-randog.factory"], [17, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[14, "randog.DictItemExample.prop_exists"]], "randog": [[14, "module-randog"]], "factoryconstructionerror": [[15, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[15, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[15, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[16, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[16, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[16, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[16, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[16, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[16, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[16, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[16, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[16, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[16, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[16, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[16, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[16, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[16, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[16, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[16, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[16, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[16, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[16, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[16, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[16, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[16, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[16, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[16, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[16, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[16, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[16, "randog.factory.randlist"]], "randog.factory": [[16, "module-randog.factory"]], "randstr() (in module randog.factory)": [[16, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[16, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[16, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[16, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[16, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[16, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[16, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[17, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[17, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[17, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[17, "module-randog.sqlalchemy"]]}})