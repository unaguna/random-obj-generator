Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 7, 8, 9, 11, 13, 14], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20], "an": [2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 19, 20], "object": [3, 4, 5, 10, 11, 13, 17, 19, 20], "The": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 14, 15, 19], "rule": [3, 4, 19], "ar": [0, 1, 2, 3, 4, 5, 9, 11, 12, 15, 19], "specifi": [0, 4, 6, 8, 9, 13, 19, 20], "when": [3, 4, 7, 8, 9, 11, 19], "creat": [2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 19, 20], "If": [3, 4, 5, 6, 7, 8, 9, 11, 14, 19, 20], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20], "do": [4, 8, 19], "care": [4, 15], "about": 4, "condit": [0, 4, 19], "other": [3, 4, 5, 6, 9, 11, 19, 20], "than": [4, 9, 11, 19], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 19], "simpli": [4, 11], "suppli": 4, "exampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 19, 20], "from_exampl": [2, 4, 7, 10, 14, 19, 20], "want": [0, 1, 3, 4, 5, 9, 10, 11, 14, 20], "us": [0, 2, 3, 4, 5, 6, 7, 9, 11, 13, 14, 16, 19, 20], "constructor": 4, "correspond": [4, 5, 19], "import": [2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 19, 20], "factory_a": 4, "generated_a": 4, "next": [4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 19, 20], "assert": [4, 5, 6, 7, 8, 9, 10, 11, 15, 19], "isinst": [4, 5, 7, 9, 10, 11, 15, 19], "str": [0, 3, 4, 5, 7, 9, 10, 11, 13, 15, 18, 19, 20], "factory_b": 4, "randstr": [4, 5, 9, 13, 15, 19], "length": [4, 5, 11, 13, 15, 19], "16": [4, 5, 13, 14], "generated_b": 4, "len": [0, 4, 9, 11, 15, 19], "follow": [0, 1, 2, 3, 4, 7, 8, 10, 11, 13, 14, 15], "argument": [4, 5, 6, 11, 16, 19], "nonetyp": 4, "There": [3, 4, 15], "dedic": 4, "function": [4, 5, 6, 10, 13, 19, 20], "const": [4, 19], "instead": [4, 5, 9, 11, 20], "none": [4, 11, 19, 20], "bool": [0, 4, 9, 19, 20], "randbool": [4, 9, 19], "true": [0, 1, 4, 5, 11, 14, 19, 20], "fals": [1, 4, 11, 19, 20], "int": [0, 4, 5, 9, 10, 11, 14, 19], "randint": [4, 5, 9, 11, 13, 19], "integ": [4, 11, 14, 20], "float": [0, 4, 11, 17, 19], "randfloat": [4, 19], "string": [3, 4, 11, 14, 19, 20], "list": [1, 3, 4, 10, 14, 15, 19], "randlist": [4, 9, 19], "tupl": [4, 19], "dict": [4, 10, 14, 19, 20], "randdict": [4, 9, 11, 13, 19], "decim": [0, 4, 19], "randdecim": [4, 9, 13, 19], "datetim": [0, 4, 11, 14, 19], "randdatetim": [4, 19], "date": [0, 4, 11, 19], "randdat": [4, 19], "time": [0, 1, 3, 4, 5, 9, 11, 14, 15, 19], "randtim": [4, 19], "timedelta": [0, 4, 14, 19], "randtimedelta": [4, 19], "candid": 4, "or_non": [4, 19], "factory_nul": 4, "0": [1, 4, 5, 6, 9, 11, 13, 14, 15, 17, 19], "1": [4, 6, 8, 9, 11, 14, 15, 17, 19], "get": [4, 13], "alwai": [4, 5, 9, 11], "return": [4, 5, 6, 15, 19, 20], "sever": [0, 3, 4], "method": [4, 14, 15], "determin": 4, "from": [4, 5, 6, 8, 13, 14, 20], "multipl": [1, 4, 9, 19], "make": [4, 9, 14], "e": 4, "so": [1, 4, 7, 8, 11, 19], "boolean": [1, 4, 11], "_": 4, "rang": 4, "10": [0, 1, 4, 11, 13, 15, 19], "which": [1, 3, 4, 6, 9, 16, 19], "choos": [4, 19], "either": [4, 5], "each": [0, 1, 3, 4, 5, 6, 11, 15, 19, 20], "result": [4, 19], "chosen": [4, 19], "one": [1, 3, 4, 6, 8, 9, 14, 19], "specif": [0, 4, 9, 12, 19], "randchoic": [4, 5, 6, 11, 14, 19], "allow": [4, 13, 19], "deni": 4, "same": [3, 4, 6, 9, 11, 13], "python": [0, 1, 2, 3, 4, 7, 10, 13], "predefin": 4, "thi": [3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 19, 20], "chang": [3, 4, 11, 19], "post_process": [4, 11, 13, 14, 19], "format": [0, 1, 4, 13, 19], "50000": [4, 19], "decimal_len": [4, 9, 13, 19], "2": [0, 4, 6, 8, 9, 11, 13, 14, 19], "lambda": [4, 11, 13, 14, 19], "x": [4, 19], "f": [4, 5, 19], "12": [0, 4, 14, 19], "345": [4, 19], "67": [4, 19], "3": [0, 3, 4, 8, 9, 10, 11, 19], "153": [4, 19], "21": [4, 19], "90": [4, 19], "etc": [4, 10, 19], "provid": 4, "also": [0, 2, 4, 5, 7, 9, 10, 11, 13, 14, 15, 19], "context": [4, 19], "iter": [0, 4, 9, 14, 16, 19], "includ": [3, 4, 11], "normal": [3, 4, 9, 19], "would": [4, 5, 6, 8, 9, 11, 14], "think": 4, "could": 4, "just": [1, 4, 10, 15], "directli": [4, 7, 19], "need": [4, 9], "itertool": 4, "uuid": [2, 4, 7, 10], "defin": [2, 3, 4, 19], "class": [4, 6, 11, 17, 19, 20], "mailaddressfactori": 4, "def": [4, 6, 14], "self": 4, "com": 4, "http": 4, "doc": 4, "org": 4, "librari": 4, "html": 4, "count": 4, "id": [4, 9, 11, 13, 20], "uuid4": [2, 4, 7, 10], "name": [2, 4, 5, 7, 10, 11, 13, 20], "mail": 4, "set": [4, 9], "endswith": 4, "by_cal": [4, 19], "by_iter": [4, 14, 19], "A": [4, 11, 19], "finit": 4, "onc": [4, 15], "termin": [4, 15], "cannot": [4, 11, 13, 19], "ani": [0, 4, 5, 6, 11, 17, 19, 20], "more": [0, 4, 19], "gener": [0, 1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 15, 19, 20], "element": [3, 5, 11, 14, 16, 19], "randomli": [5, 9, 10, 11, 12, 16, 19, 20], "like": [1, 5, 6, 9, 11, 14, 19], "built": [5, 6, 11], "two": [3, 5, 6, 11], "wai": [5, 6, 11, 15], "code": [2, 5, 6, 7, 9, 11, 15], "look": [5, 6, 9, 11, 14], "dictitem": [5, 6, 8, 19], "sex": 5, "m": [0, 1, 2, 3, 5, 7, 20], "ag": [2, 5, 7, 10, 11, 13], "kei": [5, 11, 15, 19], "exist": [3, 5, 8], "random": [5, 9, 12, 15, 19, 20], "100": [0, 5, 9], "9": 5, "As": [5, 11, 14, 16], "pass": [5, 10, 11, 19], "valu": [0, 1, 2, 5, 6, 8, 11, 13, 14, 15, 16, 19, 20], "keyword": [5, 19], "By": [5, 6, 10, 11], "possibl": [5, 11, 13], "whether": 5, "dictionari": [5, 20], "abov": [3, 5, 8, 11, 14], "see": [0, 2, 4, 5, 7, 11, 14], "here": [5, 11, 12], "how": [5, 11, 16], "build": [5, 11, 16], "dictitemexampl": [5, 6, 17], "smith": 5, "22": 5, "Not": 5, "limit": 5, "given": [5, 9, 11, 14], "output": [0, 1, 5, 13, 16], "similar": 5, "its": [5, 15, 19], "Or": 5, "wrap": 5, "mani": 9, "case": [1, 9, 11, 13, 14], "becaus": 9, "tailor": 9, "applic": 9, "record": [9, 11], "singl": [3, 9], "mai": [1, 8, 9, 11, 15, 19], "appropri": 9, "rather": 9, "999_999": [9, 13], "price": [9, 13], "1000": [9, 13], "200": [9, 14], "record_list": 9, "th": 9, "longer": 9, "number": [9, 19, 20], "repeat": [1, 3, 9], "last": 9, "el_factori": 9, "4": [9, 11], "therefor": 9, "typic": 9, "where": 9, "ha": 9, "mean": [9, 19], "onli": [8, 9, 19], "el": 9, "5": [1, 9, 15, 19], "sure": 9, "map": [9, 19, 20], "piec": 9, "attribut": 9, "type": [0, 3, 6, 8, 9, 13, 16, 19, 20], "necessari": [1, 9], "separ": [3, 9], "schema": 9, "sinc": [3, 9, 13], "omit": [2, 7, 9], "equal": [9, 19], "accept": [9, 19], "guarante": [8, 9], "try": 10, "step": [10, 14], "prepar": 10, "8": [6, 10, 19], "newer": 10, "pip": 10, "command": [1, 3, 7, 9, 10, 13, 16], "factori": [2, 10, 14, 16, 17, 20], "20": [0, 2, 7, 10, 11], "some": [4, 11, 12], "timelin": [12, 16], "data": [8, 12, 16], "depend": [12, 16], "previou": [11, 12, 13, 16], "json": [1, 3, 12, 16], "modul": [13, 16], "18": 13, "64": 13, "value_json": 13, "dump": 13, "we": 13, "wosar5ajmwhngj72": 13, "51": [0, 13], "convert": [3, 11, 13], "default": [1, 6, 11, 13, 19, 20], "583085": 13, "754": 13, "were": 13, "begin": 13, "v": [13, 15, 19], "non": 14, "pseudo": 14, "seri": 14, "iter_datetim": 14, "start": [14, 16], "nxt": 14, "while": 14, "yield": 14, "iter_randomwalk": 14, "step_f": 14, "2022": [0, 14], "hour": 14, "locat": 14, "hourli": 14, "01": [0, 14], "01t12": 14, "00": 14, "13": 14, "14": 14, "15": 14, "seen": 14, "definit": [0, 2, 11, 14, 16, 19], "increas": 14, "exactli": 14, "differ": [3, 14], "randomwalk": 14, "thu": 14, "wa": [7, 14, 19], "d": 14, "isoformat": 14, "128": 15, "generated1": 15, "generated2": 15, "note": [11, 15], "low": 15, "probabl": [1, 6, 11, 15, 19], "thei": [11, 15, 19], "ident": 15, "usual": 15, "sugar": 15, "coat": 15, "syntax": 15, "although": [4, 15], "itself": 15, "cnt": 15, "generated_valu": 15, "dispos": 15, "must": [2, 15, 19], "regener": 15, "infinity_it": [15, 19], "foo": [15, 19], "bar": [15, 19], "k": [11, 15, 19], "zip": [15, 19], "warn": 15, "run": [2, 15, 16], "below": [3, 15], "continu": 15, "indefinit": 15, "caus": 15, "infinit": 15, "loop": 15, "handl": 15, "packag": 16, "help": 16, "quick": 16, "instal": 16, "minim": 16, "construct": [16, 19], "nullabl": [11, 16], "union": [16, 19, 20], "choic": 16, "constanc": 16, "process": [1, 16, 19], "custom": [11, 16, 20], "detail": [3, 16], "individu": 16, "tip": 16, "usag": 16, "subpackag": 16, "submodul": 16, "index": 16, "except": 17, "prop_exist": [17, 19], "base": [11, 17, 18, 19, 20], "obj": 17, "sequenc": [17, 19], "factoryconstructionerror": [18, 19], "messag": 18, "properti": [18, 19], "item": [11, 19], "arg": 19, "kwd": 19, "abc": 19, "t": 19, "infin": 19, "serv": 19, "NOT": 19, "size": 19, "paramet": [19, 20], "abstract": 19, "accord": [0, 19], "assembl": 19, "prob": 19, "rnd": [19, 20], "whose": [11, 19], "option": [9, 13, 16, 19, 20], "callabl": 19, "r": [1, 3, 11, 19], "modifi": 19, "fromexamplecontext": 19, "path": 19, "custom_func": [11, 19, 20], "_customfunc": 19, "example_is_custom": [], "examples_stack": 19, "child": 19, "current_exampl": 19, "recurs": 19, "classmethod": [], "root": [], "func": 19, "It": [1, 2, 11, 19], "match": [19, 20], "execut": [0, 3, 7, 9, 13, 19], "first": 19, "new": 19, "recommend": 19, "receiv": 19, "kwarg": [19, 20], "futur": [11, 19], "updat": 19, "should": 19, "take": 19, "preced": 19, "over": 19, "rais": 19, "support": 19, "prop_tru": [1, 19], "inconsist": 19, "weight": [6, 19], "chose": [], "No": [2, 19], "minimum": 19, "maximum": [8, 19], "tzinfo": 19, "liter": 19, "fix": 19, "awar": 19, "correct": 19, "otherwis": 19, "supportsfloat": 19, "p_inf": 19, "n_inf": 19, "nan": 19, "part": 19, "posit": [8, 19], "neg": 19, "items_dict": 19, "hashabl": 19, "ignor": [11, 19], "_base": 19, "_list": 19, "items_list": 19, "charset": 19, "charact": 19, "timezon": [], "inform": [], "unit": 19, "atom": 19, "simplest": 1, "factory_definition_fil": [], "filenam": [2, 19], "instanc": [2, 20], "variabl": [2, 7], "print": 3, "repr": 3, "befor": 3, "standard": 3, "after": [3, 8], "being": 3, "For": [0, 3, 11, 20], "factory_def": [0, 2, 3, 7], "py": [0, 2, 3, 7], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 6, 9, 13], "redirect": 3, "featur": [3, 11], "shell": 3, "combin": 3, "describ": [0, 3, 7], "them": [3, 7], "l": [1, 3], "repeatedli": [3, 11], "ONE": 3, "contain": [1, 3, 11], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": 3, "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 7], "far": 7, "load": 7, "runtim": 7, "written": 7, "bound": 7, "save": 7, "under": 7, "your": 7, "from_pyfil": [7, 19], "extern": 16, "file": [0, 2, 16, 19], "pathlik": 19, "io": 19, "notimpl": 19, "behav": 19, "until": 19, "enumer": [4, 6], "randenum": [4, 19], "particular": [4, 11], "enum": [4, 19], "myenum": 6, "custom_chain_length": 19, "signal_terminate_custom": 19, "terminate_custom_chain": 19, "enum_cl": 19, "bias": 6, "elif": 6, "commonli": 4, "increment": [4, 11, 14, 19], "wish": 8, "initi": 8, "ad": 8, "databas": [8, 11], "initial_valu": [8, 19], "101": 8, "31": 8, "102": 8, "103": 8, "fit": 8, "sign": 8, "32": 8, "bit": 8, "add": [14, 20], "auto": 14, "field": [14, 20], "special": 16, "sequenti": 19, "reach": 19, "reset": 19, "satisfi": [1, 11, 19], "sqlalchemi": [4, 5, 17], "enabl": [], "experiment": 11, "remov": 11, "significantli": 11, "variou": 11, "appli": 11, "mapped_column": 11, "orm": [11, 20], "declarative_bas": [11, 20], "user": [11, 20], "__tablename__": [11, 20], "primary_kei": [11, 20], "autoincr": [11, 20], "least": 11, "work": 11, "biginteg": 11, "numer": 11, "text": 11, "timestamp": 11, "interv": 11, "doe": 11, "all": [3, 11], "rdb": 11, "pleas": 11, "relationship": 11, "foreign": 11, "constraint": 11, "even": 11, "uniqu": [2, 11], "primari": 11, "duplic": 11, "known": 11, "greater": 11, "intuit": 11, "birthdai": 11, "problem": 11, "check": 11, "shown": [], "accomplish": [], "deriv": 20, "column": 20, "model": [5, 11, 20], "as_dict": [5, 11, 20], "factory_from_column": 20, "60": 11, "overridden": 11, "second": 11, "respect": 11, "for_exampl": [], "inspect": 11, "col": 11, "attr": 11, "override_column": 20, "obtain": [1, 20], "independ": 11, "reiter": 11, "automat": 11, "manual": 11, "group_id": 11, "respond": 11, "regular": 11, "manag": 11, "order": 11, "actual": 11, "coe": [], "advanc": 11, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": 0, "2023": 0, "03": 0, "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 7], "common": [0, 1, 2], "mode": [3, 7, 16], "50": 1, "lower": 1, "program": 1, "anoth": 1, "languag": 1, "desir": 1}, "objects": {"": [[17, 0, 0, "-", "randog"]], "randog": [[17, 1, 1, "", "DictItemExample"], [17, 1, 1, "", "Example"], [18, 0, 0, "-", "exceptions"], [19, 0, 0, "-", "factory"], [20, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[17, 2, 1, "", "example"], [17, 2, 1, "", "prop_exists"]], "randog.exceptions": [[18, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[18, 4, 1, "", "message"]], "randog.factory": [[19, 1, 1, "", "DictItem"], [19, 1, 1, "", "Factory"], [19, 1, 1, "", "FromExampleContext"], [19, 6, 1, "", "by_callable"], [19, 6, 1, "", "by_iterator"], [19, 6, 1, "", "const"], [19, 6, 1, "", "from_example"], [19, 6, 1, "", "from_pyfile"], [19, 6, 1, "", "increment"], [19, 6, 1, "", "randbool"], [19, 6, 1, "", "randchoice"], [19, 6, 1, "", "randdate"], [19, 6, 1, "", "randdatetime"], [19, 6, 1, "", "randdecimal"], [19, 6, 1, "", "randdict"], [19, 6, 1, "", "randenum"], [19, 6, 1, "", "randfloat"], [19, 6, 1, "", "randint"], [19, 6, 1, "", "randlist"], [19, 6, 1, "", "randstr"], [19, 6, 1, "", "randtime"], [19, 6, 1, "", "randtimedelta"], [19, 6, 1, "", "union"]], "randog.factory.DictItem": [[19, 2, 1, "", "factory"], [19, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[19, 5, 1, "", "infinity_iter"], [19, 5, 1, "", "iter"], [19, 5, 1, "", "next"], [19, 5, 1, "", "or_none"], [19, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[19, 4, 1, "", "current_example"], [19, 4, 1, "", "custom_chain_length"], [19, 4, 1, "", "custom_funcs"], [19, 4, 1, "", "examples"], [19, 5, 1, "", "from_example"], [19, 4, 1, "", "path"], [19, 5, 1, "", "recursive"], [19, 4, 1, "", "rnd"], [19, 4, 1, "", "signal_terminate_custom"], [19, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[20, 6, 1, "", "custom"], [20, 6, 1, "", "factory"], [20, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 4, "factori": [4, 5, 6, 7, 8, 9, 11, 13, 15, 19], "gener": [4, 9, 11, 16], "random": [4, 14, 16], "valu": 4, "element": [4, 9], "type": [4, 11, 14], "nullabl": 4, "union": 4, "randomli": [4, 13], "choic": 4, "constanc": 4, "process": 4, "output": [3, 4], "custom": 4, "detail": [0, 4], "how": 4, "build": 4, "individu": [4, 11], "dict": [5, 11], "randdict": 5, "from_exampl": [5, 6, 9, 11], "list": 9, "each": 9, "length": 9, "tupl": 9, "quick": 10, "start": 10, "instal": 10, "minim": 10, "us": [10, 15], "tip": 12, "usag": 12, "creat": 13, "json": 13, "decim": 13, "e": 13, "t": 13, "c": 13, "string": 13, "timelin": 14, "data": 14, "depend": 14, "previou": 14, "chang": 14, "smpl_datetim": 14, "str": 14, "As": 15, "iter": [3, 15], "obj": 16, "content": [16, 17], "indic": 16, "tabl": 16, "randog": [11, 17, 18, 19, 20], "packag": [17, 18, 19, 20], "subpackag": 17, "submodul": 17, "modul": 17, "except": 18, "run": 0, "command": 0, "format": 3, "file": [3, 7], "extern": 7, "definit": 7, "enum": 6, "randenum": 6, "special": 4, "increment": 8, "integ": 8, "from": 11, "sqlalchemi": [11, 20], "support": 11, "column": 11, "limit": 11, "model": [], "instanc": 11, "some": [], "field": 11, "specifi": 11, "mode": [0, 1, 2], "argument": [0, 1, 2], "option": [0, 1, 2, 3], "byfil": 2, "common": 3, "bool": 1, "exampl": 1}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "Construct Factories (generator of random values)": [[4, "construct-factories-generator-of-random-values"]], "Elemental types": [[4, "elemental-types"]], "Nullable": [[4, "nullable"]], "Union type": [[4, "union-type"]], "Randomly choice": [[4, "randomly-choice"]], "Constance": [[4, "constance"]], "Processing output": [[4, "processing-output"]], "Custom Factory": [[4, "custom-factory"]], "Details on how to build individual factories": [[4, "details-on-how-to-build-individual-factories"]], "Special Factory": [[4, "special-factory"]], "Dict factory": [[5, "dict-factory"]], "Factory by randdict": [[5, "factory-by-randdict"]], "Factory by from_example": [[5, "factory-by-from-example"], [6, "factory-by-from-example"], [9, "factory-by-from-example"], [11, "factory-by-from-example"]], "Enum factory": [[6, "enum-factory"]], "Factory by randenum": [[6, "factory-by-randenum"]], "External File Definition of Factory": [[7, "external-file-definition-of-factory"]], "Incremental integer factory": [[8, "incremental-integer-factory"]], "List factory": [[9, "list-factory"]], "Each elements": [[9, "each-elements"]], "Length": [[9, "length"]], "Generate tuple": [[9, "generate-tuple"]], "Quick start": [[10, "quick-start"]], "Installation": [[10, "installation"]], "Minimal use": [[10, "minimal-use"]], "Factory from sqlalchemy": [[11, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[11, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[11, "supported-column-type"]], "Limitations": [[11, "limitations"]], "Specify factories for individual fields": [[11, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[11, "generate-a-dict-instance"]], "Tips (Usage)": [[12, "tips-usage"]], "Create JSON randomly": [[13, "create-json-randomly"]], "Decimal e.t.c.": [[13, "decimal-e-t-c"]], "Factory of JSON string": [[13, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[14, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[14, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[15, "use-factories"]], "As iterator": [[15, "as-iterator"]], "random-obj-generator": [[16, "random-obj-generator"]], "Contents:": [[16, null]], "Indices and tables": [[16, "indices-and-tables"]], "randog package": [[17, "randog-package"]], "Subpackages and submodules": [[17, "subpackages-and-submodules"]], "Module contents": [[17, "module-randog"]], "randog.exceptions package": [[18, "module-randog.exceptions"]], "randog.factory package": [[19, "module-randog.factory"]], "randog.sqlalchemy package": [[20, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[17, "randog.DictItemExample"]], "example (class in randog)": [[17, "randog.Example"]], "example (randog.dictitemexample attribute)": [[17, "randog.DictItemExample.example"]], "module": [[17, "module-randog"], [18, "module-randog.exceptions"], [19, "module-randog.factory"], [20, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[17, "randog.DictItemExample.prop_exists"]], "randog": [[17, "module-randog"]], "factoryconstructionerror": [[18, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[18, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[18, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[19, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[19, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[19, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[19, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[19, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[19, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[19, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[19, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[19, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[19, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[19, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[19, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[19, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[19, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[19, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[19, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[19, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[19, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[19, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[19, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[19, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[19, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[19, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[19, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[19, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[19, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[19, "randog.factory.randlist"]], "randog.factory": [[19, "module-randog.factory"]], "randstr() (in module randog.factory)": [[19, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[19, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[19, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[19, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[19, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[19, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[19, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[20, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[20, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[20, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[20, "module-randog.sqlalchemy"]]}})