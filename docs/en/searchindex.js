Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.as_command.int", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.as_command.int.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "int Mode", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 5, 8, 9, 10, 12, 14, 15], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 20, 21], "an": [2, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 20, 21], "object": [3, 5, 6, 11, 12, 14, 18, 20, 21], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 20], "rule": [3, 5, 20], "ar": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 16, 20], "specifi": [0, 4, 5, 7, 9, 10, 14, 20, 21], "when": [3, 5, 8, 9, 10, 12, 20], "creat": [2, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21], "If": [3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20, 21], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 21], "do": [5, 9, 20], "care": [5, 16], "about": 5, "condit": [0, 5, 20], "other": [3, 5, 6, 7, 10, 12, 20, 21], "than": [5, 10, 12, 20], "can": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20], "simpli": [5, 12], "suppli": 5, "exampl": [0, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21], "from_exampl": [2, 5, 8, 11, 15, 20, 21], "want": [0, 1, 3, 4, 5, 6, 10, 11, 12, 15, 21], "us": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 17, 20, 21], "constructor": 5, "correspond": [5, 6, 20], "import": [2, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21], "factory_a": 5, "generated_a": 5, "next": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 20, 21], "assert": [5, 6, 7, 8, 9, 10, 11, 12, 16, 20], "isinst": [5, 6, 8, 10, 11, 12, 16, 20], "str": [0, 3, 5, 6, 8, 10, 11, 12, 14, 16, 19, 20, 21], "factory_b": 5, "randstr": [5, 6, 10, 14, 16, 20], "length": [5, 6, 12, 14, 16, 20], "16": [5, 6, 14, 15], "generated_b": 5, "len": [0, 5, 10, 12, 16, 20], "follow": [0, 1, 2, 3, 4, 5, 8, 9, 11, 12, 14, 15, 16], "argument": [5, 6, 7, 12, 17, 20], "nonetyp": 5, "There": [3, 5, 16], "dedic": 5, "function": [5, 6, 7, 11, 14, 20, 21], "const": [5, 20], "instead": [5, 6, 10, 12, 21], "none": [5, 12, 20, 21], "bool": [0, 4, 5, 10, 20, 21], "randbool": [5, 10, 20], "true": [0, 1, 5, 6, 12, 15, 20, 21], "fals": [1, 5, 12, 20, 21], "int": [0, 5, 6, 10, 11, 12, 15, 20], "randint": [5, 6, 10, 12, 14, 20], "integ": [4, 5, 12, 15, 21], "float": [0, 4, 5, 12, 18, 20], "randfloat": [5, 20], "string": [3, 5, 12, 15, 20, 21], "list": [1, 3, 4, 5, 11, 15, 16, 20], "randlist": [5, 10, 20], "tupl": [5, 20], "dict": [5, 11, 15, 20, 21], "randdict": [5, 10, 12, 14, 20], "decim": [0, 4, 5, 20], "randdecim": [5, 10, 14, 20], "datetim": [0, 5, 12, 15, 20], "randdatetim": [5, 20], "date": [0, 5, 12, 20], "randdat": [5, 20], "time": [0, 1, 3, 4, 5, 6, 10, 12, 15, 16, 20], "randtim": [5, 20], "timedelta": [0, 5, 15, 20], "randtimedelta": [5, 20], "candid": 5, "or_non": [5, 20], "factory_nul": 5, "0": [1, 4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 20], "1": [5, 7, 9, 10, 12, 15, 16, 18, 20], "get": [5, 14], "alwai": [5, 6, 10, 12], "return": [5, 6, 7, 16, 20, 21], "sever": [0, 3, 5], "method": [5, 15, 16], "determin": 5, "from": [5, 6, 7, 9, 14, 15, 21], "multipl": [1, 4, 5, 10, 20], "make": [5, 10, 15], "e": 5, "so": [1, 4, 5, 8, 9, 12, 20], "boolean": [1, 5, 12], "_": 5, "rang": [4, 5], "10": [0, 1, 4, 5, 12, 14, 16, 20], "which": [1, 3, 4, 5, 7, 10, 17, 20], "choos": [5, 20], "either": [5, 6], "each": [0, 1, 3, 5, 6, 7, 12, 16, 20, 21], "result": [5, 20], "chosen": [5, 20], "one": [1, 3, 4, 5, 7, 9, 10, 15, 20], "specif": [0, 5, 10, 13, 20], "randchoic": [5, 6, 7, 12, 15, 20], "allow": [5, 14, 20], "deni": 5, "same": [3, 5, 7, 10, 12, 14], "python": [0, 1, 2, 3, 4, 5, 8, 11, 14], "predefin": 5, "thi": [3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 20, 21], "chang": [3, 5, 12, 20], "post_process": [5, 12, 14, 15, 20], "format": [0, 1, 4, 5, 14, 20], "50000": [5, 20], "decimal_len": [5, 10, 14, 20], "2": [0, 5, 7, 9, 10, 12, 14, 15, 20], "lambda": [5, 12, 14, 15, 20], "x": [5, 20], "f": [5, 6, 20], "12": [0, 5, 15, 20], "345": [5, 20], "67": [5, 20], "3": [0, 3, 5, 9, 10, 11, 12, 20], "153": [5, 20], "21": [5, 20], "90": [5, 20], "etc": [5, 11, 20], "provid": 5, "also": [0, 2, 5, 6, 8, 10, 11, 12, 14, 15, 16, 20], "context": [5, 20], "iter": [0, 5, 10, 15, 17, 20], "includ": [3, 5, 12], "normal": [3, 5, 10, 20], "would": [5, 6, 7, 9, 10, 12, 15], "think": 5, "could": 5, "just": [1, 4, 5, 11, 16], "directli": [5, 8, 20], "need": [5, 10], "itertool": 5, "uuid": [2, 5, 8, 11], "defin": [2, 3, 5, 20], "class": [5, 7, 12, 18, 20, 21], "mailaddressfactori": 5, "def": [5, 7, 15], "self": 5, "com": 5, "http": 5, "doc": 5, "org": 5, "librari": 5, "html": 5, "count": 5, "id": [5, 10, 12, 14, 21], "uuid4": [2, 5, 8, 11], "name": [2, 5, 6, 8, 11, 12, 14, 21], "mail": 5, "set": [5, 10], "endswith": 5, "by_cal": [5, 20], "by_iter": [5, 15, 20], "A": [5, 12, 20], "finit": 5, "onc": [5, 16], "termin": [5, 16], "cannot": [5, 12, 14, 20], "ani": [0, 5, 6, 7, 12, 18, 20, 21], "more": [0, 5, 20], "gener": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 14, 15, 16, 20, 21], "element": [3, 6, 12, 15, 17, 20], "randomli": [6, 10, 11, 12, 13, 17, 20, 21], "like": [1, 4, 6, 7, 10, 12, 15, 20], "built": [6, 7, 12], "two": [3, 6, 7, 12], "wai": [6, 7, 12, 16], "code": [2, 6, 7, 8, 10, 12, 16], "look": [6, 7, 10, 12, 15], "dictitem": [6, 7, 9, 20], "sex": 6, "m": [0, 1, 2, 3, 4, 6, 8, 21], "ag": [2, 6, 8, 11, 12, 14], "kei": [6, 12, 16, 20], "exist": [3, 6, 9], "random": [6, 10, 13, 16, 20, 21], "100": [0, 4, 6, 10], "9": 6, "As": [6, 12, 15, 17], "pass": [6, 11, 12, 20], "valu": [0, 1, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 20, 21], "keyword": [6, 20], "By": [6, 7, 11, 12], "possibl": [6, 12, 14], "whether": 6, "dictionari": [6, 21], "abov": [3, 6, 9, 12, 15], "see": [0, 2, 5, 6, 8, 12, 15], "here": [6, 12, 13], "how": [6, 12, 17], "build": [6, 12, 17], "dictitemexampl": [6, 7, 18], "smith": 6, "22": 6, "Not": 6, "limit": 6, "given": [6, 10, 12, 15], "output": [0, 1, 4, 6, 14, 17], "similar": 6, "its": [6, 16, 20], "Or": 6, "wrap": 6, "mani": 10, "case": [1, 10, 12, 14, 15], "becaus": 10, "tailor": 10, "applic": 10, "record": [10, 12], "singl": [3, 10], "mai": [1, 9, 10, 12, 16, 20], "appropri": 10, "rather": 10, "999_999": [10, 14], "price": [10, 14], "1000": [10, 14], "200": [10, 15], "record_list": 10, "th": 10, "longer": 10, "number": [10, 20, 21], "repeat": [1, 3, 4, 10], "last": 10, "el_factori": 10, "4": [10, 12], "therefor": 10, "typic": 10, "where": 10, "ha": 10, "mean": [10, 20], "onli": [9, 10, 20], "el": 10, "5": [1, 10, 16, 20], "sure": 10, "map": [10, 20, 21], "piec": 10, "attribut": 10, "type": [0, 3, 7, 9, 10, 14, 17, 20, 21], "necessari": [1, 10], "separ": [3, 10], "schema": 10, "sinc": [3, 10, 14], "omit": [2, 8, 10], "equal": [10, 20], "accept": [10, 20], "guarante": [9, 10], "try": 11, "step": [11, 15], "prepar": 11, "8": [7, 11, 20], "newer": 11, "pip": 11, "command": [1, 3, 4, 8, 10, 11, 14, 17], "factori": [2, 11, 15, 17, 18, 21], "20": [0, 2, 8, 11, 12], "some": [5, 12, 13], "timelin": [13, 17], "data": [9, 13, 17], "depend": [13, 17], "previou": [12, 13, 14, 17], "json": [1, 3, 13, 17], "modul": [14, 17], "18": 14, "64": 14, "value_json": 14, "dump": 14, "we": 14, "wosar5ajmwhngj72": 14, "51": [0, 14], "convert": [3, 12, 14], "default": [1, 7, 12, 14, 20, 21], "583085": 14, "754": 14, "were": 14, "begin": 14, "v": [14, 16, 20], "non": 15, "pseudo": 15, "seri": 15, "iter_datetim": 15, "start": [15, 17], "nxt": 15, "while": 15, "yield": 15, "iter_randomwalk": 15, "step_f": 15, "2022": [0, 15], "hour": 15, "locat": 15, "hourli": 15, "01": [0, 15], "01t12": 15, "00": 15, "13": 15, "14": 15, "15": 15, "seen": 15, "definit": [0, 2, 12, 15, 17, 20], "increas": 15, "exactli": 15, "differ": [3, 15], "randomwalk": 15, "thu": 15, "wa": [8, 15, 20], "d": 15, "isoformat": 15, "128": 16, "generated1": 16, "generated2": 16, "note": [12, 16], "low": 16, "probabl": [1, 4, 7, 12, 16, 20], "thei": [12, 16, 20], "ident": 16, "usual": 16, "sugar": 16, "coat": 16, "syntax": 16, "although": [5, 16], "itself": 16, "cnt": 16, "generated_valu": 16, "dispos": 16, "must": [2, 16, 20], "regener": 16, "infinity_it": [16, 20], "foo": [16, 20], "bar": [16, 20], "k": [12, 16, 20], "zip": [16, 20], "warn": 16, "run": [2, 16, 17], "below": [3, 16], "continu": 16, "indefinit": 16, "caus": 16, "infinit": 16, "loop": 16, "handl": 16, "packag": 17, "help": 17, "quick": 17, "instal": 17, "minim": 17, "construct": [17, 20], "nullabl": [12, 17], "union": [17, 20, 21], "choic": 17, "constanc": 17, "process": [1, 17, 20], "custom": [12, 17, 21], "detail": [3, 17], "individu": 17, "tip": 17, "usag": 17, "subpackag": 17, "submodul": 17, "index": 17, "except": 18, "prop_exist": [18, 20], "base": [12, 18, 19, 20, 21], "obj": 18, "sequenc": [18, 20], "factoryconstructionerror": [19, 20], "messag": 19, "properti": [19, 20], "item": [12, 20], "arg": 20, "kwd": 20, "abc": 20, "t": 20, "infin": 20, "serv": 20, "NOT": 20, "size": 20, "paramet": [20, 21], "abstract": 20, "accord": [0, 20], "assembl": 20, "prob": 20, "rnd": [20, 21], "whose": [12, 20], "option": [10, 14, 17, 20, 21], "callabl": 20, "r": [1, 3, 4, 12, 20], "modifi": 20, "fromexamplecontext": 20, "path": 20, "custom_func": [12, 20, 21], "_customfunc": 20, "example_is_custom": [], "examples_stack": 20, "child": 20, "current_exampl": 20, "recurs": 20, "classmethod": [], "root": [], "func": 20, "It": [1, 2, 12, 20], "match": [20, 21], "execut": [0, 3, 8, 10, 14, 20], "first": 20, "new": 20, "recommend": 20, "receiv": 20, "kwarg": [20, 21], "futur": [12, 20], "updat": 20, "should": 20, "take": 20, "preced": 20, "over": 20, "rais": 20, "support": 20, "prop_tru": [1, 20], "inconsist": 20, "weight": [7, 20], "chose": [], "No": [2, 20], "minimum": [4, 20], "maximum": [4, 9, 20], "tzinfo": 20, "liter": 20, "fix": 20, "awar": 20, "correct": 20, "otherwis": 20, "supportsfloat": 20, "p_inf": 20, "n_inf": 20, "nan": 20, "part": 20, "posit": [9, 20], "neg": 20, "items_dict": 20, "hashabl": 20, "ignor": [12, 20], "_base": 20, "_list": 20, "items_list": 20, "charset": 20, "charact": 20, "timezon": [], "inform": [], "unit": 20, "atom": 20, "simplest": [1, 4], "factory_definition_fil": [], "filenam": [2, 20], "instanc": [2, 21], "variabl": [2, 8], "print": 3, "repr": 3, "befor": 3, "standard": 3, "after": [3, 9], "being": 3, "For": [0, 3, 12, 21], "factory_def": [0, 2, 3, 8], "py": [0, 2, 3, 8], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 7, 10, 14], "redirect": 3, "featur": [3, 12], "shell": 3, "combin": 3, "describ": [0, 3, 8], "them": [3, 8], "l": [1, 3, 4], "repeatedli": [3, 12], "ONE": 3, "contain": [1, 3, 4, 12], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": 3, "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 5, 8], "far": 8, "load": 8, "runtim": 8, "written": 8, "bound": 8, "save": 8, "under": 8, "your": 8, "from_pyfil": [8, 20], "extern": 17, "file": [0, 2, 17, 20], "pathlik": 20, "io": 20, "notimpl": 20, "behav": 20, "until": 20, "enumer": [5, 7], "randenum": [5, 20], "particular": [5, 12], "enum": [5, 20], "myenum": 7, "custom_chain_length": 20, "signal_terminate_custom": 20, "terminate_custom_chain": 20, "enum_cl": 20, "bias": 7, "elif": 7, "commonli": 5, "increment": [5, 12, 15, 20], "wish": 9, "initi": 9, "ad": 9, "databas": [9, 12], "initial_valu": [9, 20], "101": 9, "31": 9, "102": 9, "103": 9, "fit": 9, "sign": 9, "32": 9, "bit": 9, "add": [15, 21], "auto": 15, "field": [15, 21], "special": 17, "sequenti": 20, "reach": 20, "reset": 20, "satisfi": [1, 4, 12, 20], "sqlalchemi": [5, 6, 18], "enabl": [], "experiment": 12, "remov": 12, "significantli": 12, "variou": 12, "appli": 12, "mapped_column": 12, "orm": [12, 21], "declarative_bas": [12, 21], "user": [12, 21], "__tablename__": [12, 21], "primary_kei": [12, 21], "autoincr": [12, 21], "least": 12, "work": 12, "biginteg": 12, "numer": 12, "text": 12, "timestamp": 12, "interv": 12, "doe": 12, "all": [3, 12], "rdb": 12, "pleas": 12, "relationship": 12, "foreign": 12, "constraint": 12, "even": 12, "uniqu": [2, 12], "primari": 12, "duplic": 12, "known": 12, "greater": 12, "intuit": 12, "birthdai": 12, "problem": 12, "check": 12, "shown": [], "accomplish": [], "deriv": 21, "column": 21, "model": [6, 12, 21], "as_dict": [6, 12, 21], "factory_from_column": 21, "60": 12, "overridden": 12, "second": 12, "respect": 12, "for_exampl": [], "inspect": 12, "col": 12, "attr": 12, "override_column": 21, "obtain": [1, 21], "independ": 12, "reiter": 12, "automat": 12, "manual": 12, "group_id": 12, "respond": 12, "regular": 12, "manag": 12, "order": 12, "actual": 12, "coe": [], "advanc": 12, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": 0, "2023": 0, "03": 0, "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 8], "common": [0, 1, 2, 4], "mode": [3, 8, 17], "50": 1, "lower": 1, "program": 1, "anoth": 1, "languag": 1, "desir": 1}, "objects": {"": [[18, 0, 0, "-", "randog"]], "randog": [[18, 1, 1, "", "DictItemExample"], [18, 1, 1, "", "Example"], [19, 0, 0, "-", "exceptions"], [20, 0, 0, "-", "factory"], [21, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[18, 2, 1, "", "example"], [18, 2, 1, "", "prop_exists"]], "randog.exceptions": [[19, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[19, 4, 1, "", "message"]], "randog.factory": [[20, 1, 1, "", "DictItem"], [20, 1, 1, "", "Factory"], [20, 1, 1, "", "FromExampleContext"], [20, 6, 1, "", "by_callable"], [20, 6, 1, "", "by_iterator"], [20, 6, 1, "", "const"], [20, 6, 1, "", "from_example"], [20, 6, 1, "", "from_pyfile"], [20, 6, 1, "", "increment"], [20, 6, 1, "", "randbool"], [20, 6, 1, "", "randchoice"], [20, 6, 1, "", "randdate"], [20, 6, 1, "", "randdatetime"], [20, 6, 1, "", "randdecimal"], [20, 6, 1, "", "randdict"], [20, 6, 1, "", "randenum"], [20, 6, 1, "", "randfloat"], [20, 6, 1, "", "randint"], [20, 6, 1, "", "randlist"], [20, 6, 1, "", "randstr"], [20, 6, 1, "", "randtime"], [20, 6, 1, "", "randtimedelta"], [20, 6, 1, "", "union"]], "randog.factory.DictItem": [[20, 2, 1, "", "factory"], [20, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[20, 5, 1, "", "infinity_iter"], [20, 5, 1, "", "iter"], [20, 5, 1, "", "next"], [20, 5, 1, "", "or_none"], [20, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[20, 4, 1, "", "current_example"], [20, 4, 1, "", "custom_chain_length"], [20, 4, 1, "", "custom_funcs"], [20, 4, 1, "", "examples"], [20, 5, 1, "", "from_example"], [20, 4, 1, "", "path"], [20, 5, 1, "", "recursive"], [20, 4, 1, "", "rnd"], [20, 4, 1, "", "signal_terminate_custom"], [20, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[21, 6, 1, "", "custom"], [21, 6, 1, "", "factory"], [21, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 5, "factori": [5, 6, 7, 8, 9, 10, 12, 14, 16, 20], "gener": [5, 10, 12, 17], "random": [5, 15, 17], "valu": 5, "element": [5, 10], "type": [5, 12, 15], "nullabl": 5, "union": 5, "randomli": [5, 14], "choic": 5, "constanc": 5, "process": 5, "output": [3, 5], "custom": 5, "detail": [0, 5], "how": 5, "build": 5, "individu": [5, 12], "dict": [6, 12], "randdict": 6, "from_exampl": [6, 7, 10, 12], "list": 10, "each": 10, "length": 10, "tupl": 10, "quick": 11, "start": 11, "instal": 11, "minim": 11, "us": [11, 16], "tip": 13, "usag": 13, "creat": 14, "json": 14, "decim": 14, "e": 14, "t": 14, "c": 14, "string": 14, "timelin": 15, "data": 15, "depend": 15, "previou": 15, "chang": 15, "smpl_datetim": 15, "str": 15, "As": 16, "iter": [3, 16], "obj": 17, "content": [17, 18], "indic": 17, "tabl": 17, "randog": [12, 18, 19, 20, 21], "packag": [18, 19, 20, 21], "subpackag": 18, "submodul": 18, "modul": 18, "except": 19, "run": 0, "command": 0, "format": 3, "file": [3, 8], "extern": 8, "definit": 8, "enum": 7, "randenum": 7, "special": 5, "increment": 9, "integ": 9, "from": 12, "sqlalchemi": [12, 21], "support": 12, "column": 12, "limit": 12, "model": [], "instanc": 12, "some": [], "field": 12, "specifi": 12, "mode": [0, 1, 2, 4], "argument": [0, 1, 2, 4], "option": [0, 1, 2, 3, 4], "byfil": 2, "common": 3, "bool": 1, "exampl": [1, 4], "int": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"], [4, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"], [4, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "int Mode": [[4, "int-mode"]], "Construct Factories (generator of random values)": [[5, "construct-factories-generator-of-random-values"]], "Elemental types": [[5, "elemental-types"]], "Nullable": [[5, "nullable"]], "Union type": [[5, "union-type"]], "Randomly choice": [[5, "randomly-choice"]], "Constance": [[5, "constance"]], "Processing output": [[5, "processing-output"]], "Custom Factory": [[5, "custom-factory"]], "Details on how to build individual factories": [[5, "details-on-how-to-build-individual-factories"]], "Special Factory": [[5, "special-factory"]], "Dict factory": [[6, "dict-factory"]], "Factory by randdict": [[6, "factory-by-randdict"]], "Factory by from_example": [[6, "factory-by-from-example"], [7, "factory-by-from-example"], [10, "factory-by-from-example"], [12, "factory-by-from-example"]], "Enum factory": [[7, "enum-factory"]], "Factory by randenum": [[7, "factory-by-randenum"]], "External File Definition of Factory": [[8, "external-file-definition-of-factory"]], "Incremental integer factory": [[9, "incremental-integer-factory"]], "List factory": [[10, "list-factory"]], "Each elements": [[10, "each-elements"]], "Length": [[10, "length"]], "Generate tuple": [[10, "generate-tuple"]], "Quick start": [[11, "quick-start"]], "Installation": [[11, "installation"]], "Minimal use": [[11, "minimal-use"]], "Factory from sqlalchemy": [[12, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[12, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[12, "supported-column-type"]], "Limitations": [[12, "limitations"]], "Specify factories for individual fields": [[12, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[12, "generate-a-dict-instance"]], "Tips (Usage)": [[13, "tips-usage"]], "Create JSON randomly": [[14, "create-json-randomly"]], "Decimal e.t.c.": [[14, "decimal-e-t-c"]], "Factory of JSON string": [[14, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[15, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[15, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[16, "use-factories"]], "As iterator": [[16, "as-iterator"]], "random-obj-generator": [[17, "random-obj-generator"]], "Contents:": [[17, null]], "Indices and tables": [[17, "indices-and-tables"]], "randog package": [[18, "randog-package"]], "Subpackages and submodules": [[18, "subpackages-and-submodules"]], "Module contents": [[18, "module-randog"]], "randog.exceptions package": [[19, "module-randog.exceptions"]], "randog.factory package": [[20, "module-randog.factory"]], "randog.sqlalchemy package": [[21, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[18, "randog.DictItemExample"]], "example (class in randog)": [[18, "randog.Example"]], "example (randog.dictitemexample attribute)": [[18, "randog.DictItemExample.example"]], "module": [[18, "module-randog"], [19, "module-randog.exceptions"], [20, "module-randog.factory"], [21, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[18, "randog.DictItemExample.prop_exists"]], "randog": [[18, "module-randog"]], "factoryconstructionerror": [[19, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[19, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[19, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[20, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[20, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[20, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[20, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[20, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[20, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[20, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[20, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[20, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[20, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[20, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[20, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[20, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[20, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[20, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[20, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[20, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[20, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[20, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[20, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[20, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[20, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[20, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[20, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[20, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[20, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[20, "randog.factory.randlist"]], "randog.factory": [[20, "module-randog.factory"]], "randstr() (in module randog.factory)": [[20, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[20, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[20, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[20, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[20, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[20, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[20, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[21, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[21, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[21, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[21, "module-randog.sqlalchemy"]]}})