Search.setIndex({"docnames": ["doc.as_command", "doc.as_command.bool", "doc.as_command.byfile", "doc.as_command.common_option", "doc.as_command.float", "doc.as_command.int", "doc.construct_factories", "doc.dict_factory", "doc.enum_factory", "doc.external_def", "doc.increment_factory", "doc.list_factory", "doc.quickstart", "doc.sqlalchemy", "doc.tips", "doc.tips_json", "doc.tips_timeline", "doc.use_factories", "index", "randog", "randog.exceptions", "randog.factory", "randog.sqlalchemy"], "filenames": ["doc.as_command.rst", "doc.as_command.bool.rst", "doc.as_command.byfile.rst", "doc.as_command.common_option.rst", "doc.as_command.float.rst", "doc.as_command.int.rst", "doc.construct_factories.rst", "doc.dict_factory.rst", "doc.enum_factory.rst", "doc.external_def.rst", "doc.increment_factory.rst", "doc.list_factory.rst", "doc.quickstart.rst", "doc.sqlalchemy.rst", "doc.tips.rst", "doc.tips_json.rst", "doc.tips_timeline.rst", "doc.use_factories.rst", "index.rst", "randog.rst", "randog.exceptions.rst", "randog.factory.rst", "randog.sqlalchemy.rst"], "titles": ["Run as Command", "bool Mode", "byfile Mode", "Common Options", "float Mode", "int Mode", "Construct Factories (generator of random values)", "Dict factory", "Enum factory", "External File Definition of Factory", "Incremental integer factory", "List factory", "Quick start", "Factory from sqlalchemy", "Tips (Usage)", "Create JSON randomly", "Random timeline data \u2013 depends on previous data", "Use Factories", "random-obj-generator", "randog package", "randog.exceptions package", "randog.factory package", "randog.sqlalchemy package"], "terms": {"In": [1, 2, 4, 5, 6, 9, 10, 11, 13, 15, 16], "randog": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22], "an": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 21, 22], "object": [3, 6, 7, 12, 13, 15, 19, 21, 22], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 16, 17, 21], "rule": [3, 6, 21], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 11, 13, 14, 17, 21], "specifi": [0, 4, 5, 6, 8, 10, 11, 15, 21, 22], "when": [3, 4, 6, 9, 10, 11, 13, 21], "creat": [2, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22], "If": [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 21, 22], "you": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 21, 22], "do": [6, 10, 21], "care": [6, 17], "about": 6, "condit": [0, 6, 21], "other": [3, 4, 6, 7, 8, 11, 13, 21, 22], "than": [6, 11, 13, 21], "can": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 21], "simpli": [6, 13], "suppli": 6, "exampl": [0, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 21, 22], "from_exampl": [2, 6, 9, 12, 16, 21, 22], "want": [0, 1, 3, 4, 5, 6, 7, 11, 12, 13, 16, 22], "us": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 16, 18, 21, 22], "constructor": 6, "correspond": [6, 7, 21], "import": [2, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22], "factory_a": 6, "generated_a": 6, "next": [6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22], "assert": [6, 7, 8, 9, 10, 11, 12, 13, 17, 21], "isinst": [6, 7, 9, 11, 12, 13, 17, 21], "str": [0, 3, 6, 7, 9, 11, 12, 13, 15, 17, 20, 21, 22], "factory_b": 6, "randstr": [6, 7, 11, 15, 17, 21], "length": [6, 7, 13, 15, 17, 21], "16": [6, 7, 15, 16], "generated_b": 6, "len": [0, 6, 11, 13, 17, 21], "follow": [0, 1, 2, 3, 4, 5, 6, 9, 10, 12, 13, 15, 16, 17], "argument": [6, 7, 8, 13, 18, 21], "nonetyp": 6, "There": [3, 6, 17], "dedic": 6, "function": [6, 7, 8, 12, 15, 21, 22], "const": [6, 21], "instead": [6, 7, 11, 13, 22], "none": [6, 13, 21, 22], "bool": [0, 6, 11, 21, 22], "randbool": [6, 11, 21], "true": [0, 1, 6, 7, 13, 16, 21, 22], "fals": [1, 6, 13, 21, 22], "int": [0, 4, 6, 7, 11, 12, 13, 16, 21], "randint": [6, 7, 11, 13, 15, 21], "integ": [4, 5, 6, 13, 16, 22], "float": [0, 5, 6, 13, 19, 21], "randfloat": [4, 6, 21], "string": [3, 6, 13, 16, 21, 22], "list": [1, 3, 4, 5, 6, 12, 16, 17, 21], "randlist": [6, 11, 21], "tupl": [6, 21], "dict": [6, 12, 16, 21, 22], "randdict": [6, 11, 13, 15, 21], "decim": [0, 4, 5, 6, 21], "randdecim": [6, 11, 15, 21], "datetim": [0, 6, 13, 16, 21], "randdatetim": [6, 21], "date": [0, 6, 13, 21], "randdat": [6, 21], "time": [0, 1, 3, 4, 5, 6, 7, 11, 13, 16, 17, 21], "randtim": [6, 21], "timedelta": [0, 6, 16, 21], "randtimedelta": [6, 21], "candid": [4, 6], "or_non": [6, 21], "factory_nul": 6, "0": [1, 4, 5, 6, 7, 8, 11, 13, 15, 16, 17, 19, 21], "1": [4, 6, 8, 10, 11, 13, 16, 17, 19, 21], "get": [6, 15], "alwai": [6, 7, 11, 13], "return": [6, 7, 8, 17, 21, 22], "sever": [0, 3, 6], "method": [6, 16, 17], "determin": 6, "from": [6, 7, 8, 10, 15, 16, 22], "multipl": [1, 4, 5, 6, 11, 21], "make": [6, 11, 16], "e": 6, "so": [1, 4, 5, 6, 9, 10, 13, 21], "boolean": [1, 6, 13], "_": 6, "rang": [4, 5, 6], "10": [0, 1, 4, 5, 6, 13, 15, 17, 21], "which": [1, 3, 4, 5, 6, 8, 11, 18, 21], "choos": [6, 21], "either": [6, 7], "each": [0, 1, 3, 6, 7, 8, 13, 17, 21, 22], "result": [6, 21], "chosen": [6, 21], "one": [1, 3, 4, 5, 6, 8, 10, 11, 16, 21], "specif": [0, 4, 6, 11, 14, 21], "randchoic": [6, 7, 8, 13, 16, 21], "allow": [6, 15, 21], "deni": 6, "same": [3, 6, 8, 11, 13, 15], "python": [0, 1, 2, 3, 4, 5, 6, 9, 12, 15], "predefin": 6, "thi": [3, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 21, 22], "chang": [3, 6, 13, 21], "post_process": [6, 13, 15, 16, 21], "format": [0, 1, 4, 5, 6, 15, 21], "50000": [6, 21], "decimal_len": [6, 11, 15, 21], "2": [0, 4, 6, 8, 10, 11, 13, 15, 16, 21], "lambda": [6, 13, 15, 16, 21], "x": [6, 21], "f": [6, 7, 21], "12": [0, 6, 16, 21], "345": [6, 21], "67": [6, 21], "3": [0, 3, 6, 10, 11, 12, 13, 21], "153": [6, 21], "21": [6, 21], "90": [6, 21], "etc": [6, 12, 21], "provid": 6, "also": [0, 2, 4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 21], "context": [6, 21], "iter": [0, 6, 11, 16, 18, 21], "includ": [3, 4, 6, 13], "normal": [3, 6, 11, 21], "would": [6, 7, 8, 10, 11, 13, 16], "think": 6, "could": 6, "just": [1, 4, 5, 6, 12, 17], "directli": [6, 9, 21], "need": [6, 11], "itertool": 6, "uuid": [2, 6, 9, 12], "defin": [2, 3, 6, 21], "class": [6, 8, 13, 19, 21, 22], "mailaddressfactori": 6, "def": [6, 8, 16], "self": 6, "com": 6, "http": 6, "doc": 6, "org": 6, "librari": 6, "html": 6, "count": 6, "id": [6, 11, 13, 15, 22], "uuid4": [2, 6, 9, 12], "name": [2, 6, 7, 9, 12, 13, 15, 22], "mail": 6, "set": [6, 11], "endswith": 6, "by_cal": [6, 21], "by_iter": [6, 16, 21], "A": [6, 13, 21], "finit": 6, "onc": [6, 17], "termin": [6, 17], "cannot": [6, 13, 15, 21], "ani": [0, 6, 7, 8, 13, 19, 21, 22], "more": [0, 6, 21], "gener": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 15, 16, 17, 21, 22], "element": [3, 7, 13, 16, 18, 21], "randomli": [7, 11, 12, 13, 14, 18, 21, 22], "like": [1, 4, 5, 7, 8, 11, 13, 16, 21], "built": [7, 8, 13], "two": [3, 7, 8, 13], "wai": [7, 8, 13, 17], "code": [2, 7, 8, 9, 11, 13, 17], "look": [7, 8, 11, 13, 16], "dictitem": [7, 8, 10, 21], "sex": 7, "m": [0, 1, 2, 3, 4, 5, 7, 9, 22], "ag": [2, 7, 9, 12, 13, 15], "kei": [7, 13, 17, 21], "exist": [3, 7, 10], "random": [7, 11, 14, 17, 21, 22], "100": [0, 4, 5, 7, 11], "9": 7, "As": [7, 13, 16, 18], "pass": [7, 12, 13, 21], "valu": [0, 1, 2, 4, 5, 7, 8, 10, 13, 15, 16, 17, 18, 21, 22], "keyword": [7, 21], "By": [7, 8, 12, 13], "possibl": [7, 13, 15], "whether": 7, "dictionari": [7, 22], "abov": [3, 7, 10, 13, 16], "see": [0, 2, 6, 7, 9, 13, 16], "here": [7, 13, 14], "how": [7, 13, 18], "build": [7, 13, 18], "dictitemexampl": [7, 8, 19], "smith": 7, "22": 7, "Not": 7, "limit": 7, "given": [7, 11, 13, 16], "output": [0, 1, 4, 5, 7, 15, 18], "similar": 7, "its": [7, 17, 21], "Or": 7, "wrap": 7, "mani": 11, "case": [1, 11, 13, 15, 16], "becaus": 11, "tailor": 11, "applic": 11, "record": [11, 13], "singl": [3, 11], "mai": [1, 10, 11, 13, 17, 21], "appropri": 11, "rather": 11, "999_999": [11, 15], "price": [11, 15], "1000": [11, 15], "200": [11, 16], "record_list": 11, "th": 11, "longer": 11, "number": [4, 11, 21, 22], "repeat": [1, 3, 4, 5, 11], "last": 11, "el_factori": 11, "4": [4, 11, 13], "therefor": 11, "typic": 11, "where": 11, "ha": 11, "mean": [11, 21], "onli": [10, 11, 21], "el": 11, "5": [1, 11, 17, 21], "sure": 11, "map": [11, 21, 22], "piec": 11, "attribut": 11, "type": [0, 3, 8, 10, 11, 15, 18, 21, 22], "necessari": [1, 11], "separ": [3, 11], "schema": 11, "sinc": [3, 11, 15], "omit": [2, 9, 11], "equal": [11, 21], "accept": [11, 21], "guarante": [10, 11], "try": 12, "step": [12, 16], "prepar": 12, "8": [8, 12, 21], "newer": 12, "pip": 12, "command": [1, 3, 4, 5, 9, 11, 12, 15, 18], "factori": [2, 12, 16, 18, 19, 22], "20": [0, 2, 9, 12, 13], "some": [6, 13, 14], "timelin": [14, 18], "data": [10, 14, 18], "depend": [14, 18], "previou": [13, 14, 15, 18], "json": [1, 3, 4, 14, 18], "modul": [15, 18], "18": 15, "64": 15, "value_json": 15, "dump": 15, "we": 15, "wosar5ajmwhngj72": 15, "51": [0, 15], "convert": [3, 13, 15], "default": [1, 4, 8, 13, 15, 21, 22], "583085": 15, "754": 15, "were": 15, "begin": 15, "v": [15, 17, 21], "non": 16, "pseudo": 16, "seri": 16, "iter_datetim": 16, "start": [16, 18], "nxt": 16, "while": 16, "yield": 16, "iter_randomwalk": 16, "step_f": 16, "2022": [0, 16], "hour": 16, "locat": 16, "hourli": 16, "01": [0, 4, 16], "01t12": 16, "00": 16, "13": 16, "14": 16, "15": [4, 16], "seen": 16, "definit": [0, 2, 13, 16, 18, 21], "increas": 16, "exactli": 16, "differ": [3, 16], "randomwalk": 16, "thu": 16, "wa": [9, 16, 21], "d": 16, "isoformat": 16, "128": 17, "generated1": 17, "generated2": 17, "note": [13, 17], "low": 17, "probabl": [1, 4, 5, 8, 13, 17, 21], "thei": [13, 17, 21], "ident": 17, "usual": 17, "sugar": 17, "coat": 17, "syntax": 17, "although": [6, 17], "itself": 17, "cnt": 17, "generated_valu": 17, "dispos": 17, "must": [2, 17, 21], "regener": 17, "infinity_it": [17, 21], "foo": [17, 21], "bar": [17, 21], "k": [13, 17, 21], "zip": [17, 21], "warn": 17, "run": [2, 17, 18], "below": [3, 17], "continu": 17, "indefinit": 17, "caus": 17, "infinit": 17, "loop": 17, "handl": 17, "packag": 18, "help": 18, "quick": 18, "instal": 18, "minim": 18, "construct": [18, 21], "nullabl": [13, 18], "union": [18, 21, 22], "choic": 18, "constanc": 18, "process": [1, 18, 21], "custom": [13, 18, 22], "detail": [3, 18], "individu": 18, "tip": 18, "usag": 18, "subpackag": 18, "submodul": 18, "index": 18, "except": 19, "prop_exist": [19, 21], "base": [13, 19, 20, 21, 22], "obj": 19, "sequenc": [19, 21], "factoryconstructionerror": [20, 21], "messag": 20, "properti": [20, 21], "item": [13, 21], "arg": 21, "kwd": 21, "abc": 21, "t": 21, "infin": [4, 21], "serv": 21, "NOT": 21, "size": 21, "paramet": [21, 22], "abstract": 21, "accord": [0, 21], "assembl": 21, "prob": 21, "rnd": [21, 22], "whose": [13, 21], "option": [11, 15, 18, 21, 22], "callabl": 21, "r": [1, 3, 4, 5, 13, 21], "modifi": 21, "fromexamplecontext": 21, "path": 21, "custom_func": [13, 21, 22], "_customfunc": 21, "example_is_custom": [], "examples_stack": 21, "child": 21, "current_exampl": 21, "recurs": 21, "classmethod": [], "root": [], "func": 21, "It": [1, 2, 13, 21], "match": [21, 22], "execut": [0, 3, 9, 11, 15, 21], "first": 21, "new": 21, "recommend": 21, "receiv": 21, "kwarg": [21, 22], "futur": [13, 21], "updat": 21, "should": 21, "take": 21, "preced": 21, "over": 21, "rais": 21, "support": 21, "prop_tru": [1, 21], "inconsist": 21, "weight": [8, 21], "chose": [], "No": [2, 21], "minimum": [4, 5, 21], "maximum": [4, 5, 10, 21], "tzinfo": 21, "liter": 21, "fix": 21, "awar": 21, "correct": 21, "otherwis": 21, "supportsfloat": 21, "p_inf": 21, "n_inf": 21, "nan": [4, 21], "part": [4, 21], "posit": [4, 10, 21], "neg": [4, 21], "items_dict": 21, "hashabl": 21, "ignor": [13, 21], "_base": 21, "_list": 21, "items_list": 21, "charset": 21, "charact": 21, "timezon": [], "inform": [], "unit": 21, "atom": 21, "simplest": [1, 4, 5], "factory_definition_fil": [], "filenam": [2, 21], "instanc": [2, 22], "variabl": [2, 9], "print": 3, "repr": 3, "befor": 3, "standard": [3, 4], "after": [3, 4, 10], "being": 3, "For": [0, 3, 13, 22], "factory_def": [0, 2, 3, 9], "py": [0, 2, 3, 9], "out": 3, "txt": 3, "veri": 3, "practic": 3, "thing": 3, "done": [3, 8, 11, 15], "redirect": 3, "featur": [3, 13], "shell": 3, "combin": 3, "describ": [0, 3, 9], "them": [3, 9], "l": [1, 3, 4, 5], "repeatedli": [3, 13], "ONE": 3, "contain": [1, 3, 4, 5, 13], "conform": 3, "On": 3, "hand": 3, "placehold": 3, "out_1": 3, "out_2": 3, "out_3": 3, "out_": 3, "out_0001": 3, "out_0002": 3, "out_0003": 3, "04": 3, "most": [1, 4, 5, 6, 9], "far": 9, "load": 9, "runtim": 9, "written": [4, 9], "bound": 9, "save": 9, "under": 9, "your": 9, "from_pyfil": [9, 21], "extern": 18, "file": [0, 2, 18, 21], "pathlik": 21, "io": 21, "notimpl": 21, "behav": 21, "until": 21, "enumer": [6, 8], "randenum": [6, 21], "particular": [6, 13], "enum": [6, 21], "myenum": 8, "custom_chain_length": 21, "signal_terminate_custom": 21, "terminate_custom_chain": 21, "enum_cl": 21, "bias": 8, "elif": 8, "commonli": 6, "increment": [6, 13, 16, 21], "wish": 10, "initi": 10, "ad": 10, "databas": [10, 13], "initial_valu": [10, 21], "101": 10, "31": 10, "102": 10, "103": 10, "fit": 10, "sign": 10, "32": 10, "bit": 10, "add": [16, 22], "auto": 16, "field": [16, 22], "special": 18, "sequenti": 21, "reach": 21, "reset": 21, "satisfi": [1, 4, 5, 13, 21], "sqlalchemi": [6, 7, 19], "enabl": [], "experiment": 13, "remov": 13, "significantli": 13, "variou": 13, "appli": 13, "mapped_column": 13, "orm": [13, 22], "declarative_bas": [13, 22], "user": [13, 22], "__tablename__": [13, 22], "primary_kei": [13, 22], "autoincr": [13, 22], "least": 13, "work": 13, "biginteg": 13, "numer": [4, 13], "text": 13, "timestamp": 13, "interv": 13, "doe": [4, 13], "all": [3, 13], "rdb": 13, "pleas": 13, "relationship": 13, "foreign": 13, "constraint": 13, "even": 13, "uniqu": [2, 13], "primari": 13, "duplic": 13, "known": 13, "greater": 13, "intuit": 13, "birthdai": 13, "problem": [4, 13], "check": 13, "shown": [], "accomplish": [], "deriv": 22, "column": 22, "model": [7, 13, 22], "as_dict": [7, 13, 22], "factory_from_column": 22, "60": 13, "overridden": 13, "second": 13, "respect": 13, "for_exampl": [], "inspect": 13, "col": 13, "attr": 13, "override_column": 22, "obtain": [1, 22], "independ": 13, "reiter": 13, "automat": 13, "manual": 13, "group_id": 13, "respond": 13, "regular": 13, "manag": 13, "order": 13, "actual": 13, "coe": [], "advanc": 13, "basic": 0, "further": 0, "avail": [0, 2, 3], "page": 0, "42": 0, "826684165562185": 0, "xtgh3vh1": 0, "91": 0, "2023": 0, "03": 0, "43": 0, "110244": 0, "17h": 0, "byfil": [0, 3, 9], "common": [0, 1, 2, 4, 5], "mode": [3, 9, 18], "50": 1, "lower": 1, "program": [1, 4], "anoth": 1, "languag": [1, 4], "desir": 1, "point": 4, "p": 4, "inf": 4, "prob_p_inf": 4, "n": 4, "prob_n_inf": 4, "prob_nan": 4, "behavior": 4, "left": 4, "between": 4, "1e": 4, "have": 4, "abil": 4, "place": 4, "digit": 4, "repres": 4, "read": 4}, "objects": {"": [[19, 0, 0, "-", "randog"]], "randog": [[19, 1, 1, "", "DictItemExample"], [19, 1, 1, "", "Example"], [20, 0, 0, "-", "exceptions"], [21, 0, 0, "-", "factory"], [22, 0, 0, "-", "sqlalchemy"]], "randog.DictItemExample": [[19, 2, 1, "", "example"], [19, 2, 1, "", "prop_exists"]], "randog.exceptions": [[20, 3, 1, "", "FactoryConstructionError"]], "randog.exceptions.FactoryConstructionError": [[20, 4, 1, "", "message"]], "randog.factory": [[21, 1, 1, "", "DictItem"], [21, 1, 1, "", "Factory"], [21, 1, 1, "", "FromExampleContext"], [21, 6, 1, "", "by_callable"], [21, 6, 1, "", "by_iterator"], [21, 6, 1, "", "const"], [21, 6, 1, "", "from_example"], [21, 6, 1, "", "from_pyfile"], [21, 6, 1, "", "increment"], [21, 6, 1, "", "randbool"], [21, 6, 1, "", "randchoice"], [21, 6, 1, "", "randdate"], [21, 6, 1, "", "randdatetime"], [21, 6, 1, "", "randdecimal"], [21, 6, 1, "", "randdict"], [21, 6, 1, "", "randenum"], [21, 6, 1, "", "randfloat"], [21, 6, 1, "", "randint"], [21, 6, 1, "", "randlist"], [21, 6, 1, "", "randstr"], [21, 6, 1, "", "randtime"], [21, 6, 1, "", "randtimedelta"], [21, 6, 1, "", "union"]], "randog.factory.DictItem": [[21, 2, 1, "", "factory"], [21, 2, 1, "", "prop_exists"]], "randog.factory.Factory": [[21, 5, 1, "", "infinity_iter"], [21, 5, 1, "", "iter"], [21, 5, 1, "", "next"], [21, 5, 1, "", "or_none"], [21, 5, 1, "", "post_process"]], "randog.factory.FromExampleContext": [[21, 4, 1, "", "current_example"], [21, 4, 1, "", "custom_chain_length"], [21, 4, 1, "", "custom_funcs"], [21, 4, 1, "", "examples"], [21, 5, 1, "", "from_example"], [21, 4, 1, "", "path"], [21, 5, 1, "", "recursive"], [21, 4, 1, "", "rnd"], [21, 4, 1, "", "signal_terminate_custom"], [21, 5, 1, "", "terminate_custom_chain"]], "randog.sqlalchemy": [[22, 6, 1, "", "custom"], [22, 6, 1, "", "factory"], [22, 6, 1, "", "factory_from_column"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:exception", "4": "py:property", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "property", "Python property"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"construct": 6, "factori": [6, 7, 8, 9, 10, 11, 13, 15, 17, 21], "gener": [6, 11, 13, 18], "random": [6, 16, 18], "valu": 6, "element": [6, 11], "type": [6, 13, 16], "nullabl": 6, "union": 6, "randomli": [6, 15], "choic": 6, "constanc": 6, "process": 6, "output": [3, 6], "custom": 6, "detail": [0, 6], "how": 6, "build": 6, "individu": [6, 13], "dict": [7, 13], "randdict": 7, "from_exampl": [7, 8, 11, 13], "list": 11, "each": 11, "length": 11, "tupl": 11, "quick": 12, "start": 12, "instal": 12, "minim": 12, "us": [12, 17], "tip": 14, "usag": 14, "creat": 15, "json": 15, "decim": 15, "e": 15, "t": 15, "c": 15, "string": 15, "timelin": 16, "data": 16, "depend": 16, "previou": 16, "chang": 16, "smpl_datetim": 16, "str": 16, "As": 17, "iter": [3, 17], "obj": 18, "content": [18, 19], "indic": 18, "tabl": 18, "randog": [13, 19, 20, 21, 22], "packag": [19, 20, 21, 22], "subpackag": 19, "submodul": 19, "modul": 19, "except": 20, "run": 0, "command": 0, "format": 3, "file": [3, 9], "extern": 9, "definit": 9, "enum": 8, "randenum": 8, "special": 6, "increment": 10, "integ": 10, "from": 13, "sqlalchemi": [13, 22], "support": 13, "column": 13, "limit": 13, "model": [], "instanc": 13, "some": [], "field": 13, "specifi": 13, "mode": [0, 1, 2, 4, 5], "argument": [0, 1, 2, 4, 5], "option": [0, 1, 2, 3, 4, 5], "byfil": 2, "common": 3, "bool": 1, "exampl": [1, 4, 5], "int": 5, "float": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Run as Command": [[0, "run-as-command"]], "Modes": [[0, "modes"]], "Arguments and Options": [[0, "arguments-and-options"], [1, "arguments-and-options"], [2, "arguments-and-options"], [4, "arguments-and-options"], [5, "arguments-and-options"]], "Details of Modes": [[0, "details-of-modes"]], "bool Mode": [[1, "bool-mode"]], "Examples": [[1, "examples"], [4, "examples"], [5, "examples"]], "byfile Mode": [[2, "byfile-mode"]], "Common Options": [[3, "common-options"]], "Output format": [[3, "output-format"]], "Output to file": [[3, "output-to-file"]], "Iteration": [[3, "iteration"]], "float Mode": [[4, "float-mode"]], "int Mode": [[5, "int-mode"]], "Construct Factories (generator of random values)": [[6, "construct-factories-generator-of-random-values"]], "Elemental types": [[6, "elemental-types"]], "Nullable": [[6, "nullable"]], "Union type": [[6, "union-type"]], "Randomly choice": [[6, "randomly-choice"]], "Constance": [[6, "constance"]], "Processing output": [[6, "processing-output"]], "Custom Factory": [[6, "custom-factory"]], "Details on how to build individual factories": [[6, "details-on-how-to-build-individual-factories"]], "Special Factory": [[6, "special-factory"]], "Dict factory": [[7, "dict-factory"]], "Factory by randdict": [[7, "factory-by-randdict"]], "Factory by from_example": [[7, "factory-by-from-example"], [8, "factory-by-from-example"], [11, "factory-by-from-example"], [13, "factory-by-from-example"]], "Enum factory": [[8, "enum-factory"]], "Factory by randenum": [[8, "factory-by-randenum"]], "External File Definition of Factory": [[9, "external-file-definition-of-factory"]], "Incremental integer factory": [[10, "incremental-integer-factory"]], "List factory": [[11, "list-factory"]], "Each elements": [[11, "each-elements"]], "Length": [[11, "length"]], "Generate tuple": [[11, "generate-tuple"]], "Quick start": [[12, "quick-start"]], "Installation": [[12, "installation"]], "Minimal use": [[12, "minimal-use"]], "Factory from sqlalchemy": [[13, "factory-from-sqlalchemy"]], "Factory by randog.sqlalchemy.factory": [[13, "factory-by-randog-sqlalchemy-factory"]], "Supported column type": [[13, "supported-column-type"]], "Limitations": [[13, "limitations"]], "Specify factories for individual fields": [[13, "specify-factories-for-individual-fields"]], "Generate a dict instance": [[13, "generate-a-dict-instance"]], "Tips (Usage)": [[14, "tips-usage"]], "Create JSON randomly": [[15, "create-json-randomly"]], "Decimal e.t.c.": [[15, "decimal-e-t-c"]], "Factory of JSON string": [[15, "factory-of-json-string"]], "Random timeline data \u2013 depends on previous data": [[16, "random-timeline-data-depends-on-previous-data"]], "Change the type of smpl_datetime to str": [[16, "change-the-type-of-smpl-datetime-to-str"]], "Use Factories": [[17, "use-factories"]], "As iterator": [[17, "as-iterator"]], "random-obj-generator": [[18, "random-obj-generator"]], "Contents:": [[18, null]], "Indices and tables": [[18, "indices-and-tables"]], "randog package": [[19, "randog-package"]], "Subpackages and submodules": [[19, "subpackages-and-submodules"]], "Module contents": [[19, "module-randog"]], "randog.exceptions package": [[20, "module-randog.exceptions"]], "randog.factory package": [[21, "module-randog.factory"]], "randog.sqlalchemy package": [[22, "module-randog.sqlalchemy"]]}, "indexentries": {"dictitemexample (class in randog)": [[19, "randog.DictItemExample"]], "example (class in randog)": [[19, "randog.Example"]], "example (randog.dictitemexample attribute)": [[19, "randog.DictItemExample.example"]], "module": [[19, "module-randog"], [20, "module-randog.exceptions"], [21, "module-randog.factory"], [22, "module-randog.sqlalchemy"]], "prop_exists (randog.dictitemexample attribute)": [[19, "randog.DictItemExample.prop_exists"]], "randog": [[19, "module-randog"]], "factoryconstructionerror": [[20, "randog.exceptions.FactoryConstructionError"]], "message (randog.exceptions.factoryconstructionerror property)": [[20, "randog.exceptions.FactoryConstructionError.message"]], "randog.exceptions": [[20, "module-randog.exceptions"]], "dictitem (class in randog.factory)": [[21, "randog.factory.DictItem"]], "factory (class in randog.factory)": [[21, "randog.factory.Factory"]], "fromexamplecontext (class in randog.factory)": [[21, "randog.factory.FromExampleContext"]], "by_callable() (in module randog.factory)": [[21, "randog.factory.by_callable"]], "by_iterator() (in module randog.factory)": [[21, "randog.factory.by_iterator"]], "const() (in module randog.factory)": [[21, "randog.factory.const"]], "current_example (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.current_example"]], "custom_chain_length (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.custom_chain_length"]], "custom_funcs (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.custom_funcs"]], "examples (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.examples"]], "factory (randog.factory.dictitem attribute)": [[21, "randog.factory.DictItem.factory"]], "from_example() (in module randog.factory)": [[21, "randog.factory.from_example"]], "from_example() (randog.factory.fromexamplecontext method)": [[21, "randog.factory.FromExampleContext.from_example"]], "from_pyfile() (in module randog.factory)": [[21, "randog.factory.from_pyfile"]], "increment() (in module randog.factory)": [[21, "randog.factory.increment"]], "infinity_iter() (randog.factory.factory method)": [[21, "randog.factory.Factory.infinity_iter"]], "iter() (randog.factory.factory method)": [[21, "randog.factory.Factory.iter"]], "next() (randog.factory.factory method)": [[21, "randog.factory.Factory.next"]], "or_none() (randog.factory.factory method)": [[21, "randog.factory.Factory.or_none"]], "path (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.path"]], "post_process() (randog.factory.factory method)": [[21, "randog.factory.Factory.post_process"]], "prop_exists (randog.factory.dictitem attribute)": [[21, "randog.factory.DictItem.prop_exists"]], "randbool() (in module randog.factory)": [[21, "randog.factory.randbool"]], "randchoice() (in module randog.factory)": [[21, "randog.factory.randchoice"]], "randdate() (in module randog.factory)": [[21, "randog.factory.randdate"]], "randdatetime() (in module randog.factory)": [[21, "randog.factory.randdatetime"]], "randdecimal() (in module randog.factory)": [[21, "randog.factory.randdecimal"]], "randdict() (in module randog.factory)": [[21, "randog.factory.randdict"]], "randenum() (in module randog.factory)": [[21, "randog.factory.randenum"]], "randfloat() (in module randog.factory)": [[21, "randog.factory.randfloat"]], "randint() (in module randog.factory)": [[21, "randog.factory.randint"]], "randlist() (in module randog.factory)": [[21, "randog.factory.randlist"]], "randog.factory": [[21, "module-randog.factory"]], "randstr() (in module randog.factory)": [[21, "randog.factory.randstr"]], "randtime() (in module randog.factory)": [[21, "randog.factory.randtime"]], "randtimedelta() (in module randog.factory)": [[21, "randog.factory.randtimedelta"]], "recursive() (randog.factory.fromexamplecontext method)": [[21, "randog.factory.FromExampleContext.recursive"]], "rnd (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.rnd"]], "signal_terminate_custom (randog.factory.fromexamplecontext property)": [[21, "randog.factory.FromExampleContext.signal_terminate_custom"]], "terminate_custom_chain() (randog.factory.fromexamplecontext method)": [[21, "randog.factory.FromExampleContext.terminate_custom_chain"]], "union() (in module randog.factory)": [[21, "randog.factory.union"]], "custom() (in module randog.sqlalchemy)": [[22, "randog.sqlalchemy.custom"]], "factory() (in module randog.sqlalchemy)": [[22, "randog.sqlalchemy.factory"]], "factory_from_column() (in module randog.sqlalchemy)": [[22, "randog.sqlalchemy.factory_from_column"]], "randog.sqlalchemy": [[22, "module-randog.sqlalchemy"]]}})