bytes Mode
==========

In bytes mode, bytes values are generated. The format of the command is as follows:

.. code-block:: shell

    randog bytes [--length LENGTH] [--fmt FORMAT] [common-options]

.. warning::
    This bytes generation is not guaranteed to be cryptographically secure.
    In cases where there are security requirements, such as the generation of tokens for authentication, consider using `secrets <https://docs.python.org/3/library/secrets.html>`_ module or similar.


Arguments and Options
---------------------

- :code:`--length LENGTH` (optional):

    - the length of generated bytes. You can specify an integer such as :code:`--length 5` or a range such as :code:`--length 3:8`.

- :code:`--fmt FORMAT` (optional):

    - if specified, it outputs generated object with the specified format; The format is specified in :ref:`the format codes <bytes-format-codes>`.

- :code:`common-options`

    - :doc:`common options <doc.as_command.common_option>`


Examples
--------

The simplest example is the following:

.. code-block:: shell

    randog bytes --output ./result.dat

You can specify the length as follows:

.. code-block:: shell

    # generate bytes of length 16
    randog bytes --length 16 --output ./result.dat

    # generate bytes of length 8 - 16
    randog bytes --length 8:16 --output ./result.dat

.. note::
    If you do not specify a :ref:`format <bytes-format>`, the output will be in binary data. If you try to output to the console screen, it will not be output correctly in Windows Powershell, etc., so use the :code:`--output` option as in the example above to output to a file.

.. warning::
    This bytes generation is not guaranteed to be cryptographically secure.
    In cases where there are security requirements, such as the generation of tokens for authentication, consider using `secrets <https://docs.python.org/3/library/secrets.html>`_ module or similar.

.. _bytes-format:

Format
~~~~~~

By default, the output is binary data, but you can change the output format to the format specified in :ref:`the format codes <bytes-format-codes>` as follows:

.. code-block:: shell

    # generates a value casted by str()
    randog bytes --fmt s
    # generates a value expressed in hexadecimal with padding zeros on the left.
    randog bytes --fmt '0>20x'


Repeatedly Generate
~~~~~~~~~~~~~~~~~~~

By using the -r option, it is possible to generate multiple values.

However, if you do not specify an output format, the output will be in binary format, and multiple values will be output continuously without a delimiter. To avoid this, use the :ref:`--output option <output_file>` to output to a different file for each generation, as in the following example:

.. code-block:: shell

    # Repeat 10 times; results are output as binary continuously without a delimiter
    randog bytes -r 10

    # Repeat 10 times; results are separated into different files
    randog bytes -r 10 --output 'result_{0}'

.. _bytes-format-codes:

Format codes
------------

bytes objects have no format codes defined, but in this mode, you can use proprietary format codes like `Standard Format Specifier <https://docs.python.org/3/library/string.html#format-specification-mini-language>`_.

.. code-block:: shell

    # generates a value casted by str()
    randog bytes --fmt s
    # generates a value expressed in hexadecimal with padding zeros on the left.
    randog bytes --fmt '0>20x'
    # generates a value expressed in binary notation with 4 digits each divided by '_'.
    randog bytes --fmt _b
    # generates a value expressed in hexadecimal with prefix '0x'.
    randog bytes --fmt '#x'

The available presentation types are:

- :code:`s`: String format. The output is result of function :code:`str()`, such as :code:`b'ab\\xff'`.
- :code:`c`: String format. The output is inside of result of function :code:`str()`, such as :code:`ab\\xff`.
- :code:`b`: Binary format. Outputs the number in base 2.
- :code:`x`: Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.
- :code:`X`: Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case '#' is specified, the prefix '0x' will be upper-cased to '0X' as well.
