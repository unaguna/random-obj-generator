# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, k-izumi
# This file is distributed under the same license as the
# random-obj-generator package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: random-obj-generator 0.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-11 10:05+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/doc.sqlalchemy.rst:2
msgid "Factory from sqlalchemy"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:4
msgid ""
"You can create a factory from Column or Model of sqlalchemy. This feature"
" is enabled by specifying `randog.sqlalchemy.custom "
"<randog.sqlalchemy.html#custom>`_ as custom_func when using `from_example"
" <randog.factory.html#randog.factory.from_example>`_."
msgstr ""
"sqlalchemy の Model や Column から factory を作成することができます。"
"この機能は `from_example"
" <randog.factory.html#randog.factory.from_example>`_ を使う際に引数 custom_func として "
"`randog.sqlalchemy.custom <randog.sqlalchemy.html#custom>`_ を指定することで有効化できます。"

#: ../../source/doc.sqlalchemy.rst:7
msgid ""
"This is an experimental feature. It may be removed or significantly "
"changed in the future."
msgstr "これは実験的な機能です。将来、削除もしくは大幅な修正をする可能性があります。"

#: ../../source/doc.sqlalchemy.rst:10
msgid ""
"This is an experimental feature. Various :ref:`limitations <limitations>`"
" apply."
msgstr "これは実験的な機能です。様々な :ref:`制限事項 <limitations>` があります。"

#: ../../source/doc.sqlalchemy.rst:13
msgid ""
"The following examples use the model of sqlalchemy 1.4, but also supports"
" the 2.0 using :code:`mapped_column`."
msgstr "以降の例では sqlalchemy 1.4 のモデルを使用していますが、:code:`mapped_column` を使う2.0のモデルにも対応しています。"

#: ../../source/doc.sqlalchemy.rst:48
msgid ""
"In this example, the model class is given to :code:`from_example`, but it"
" works the same way if a model instance is given."
msgstr ""
"この例ではモデルクラスを :code:`from_example` に渡していますが、モデルインスタンスを渡しても同じように動作します。"

#: ../../source/doc.sqlalchemy.rst:52
msgid "Supported column type"
msgstr "対応しているカラムの型"

#: ../../source/doc.sqlalchemy.rst:54
msgid "The following types of columns are supported"
msgstr "以下の型のカラムに対応しています。"

#: ../../source/doc.sqlalchemy.rst:56
msgid "Integer, BigInteger"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:57
msgid "Numeric"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:58
msgid "Float"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:59
msgid "String, Text"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:60
msgid "Boolean"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:61
msgid "Date"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:62
msgid "DateTime, TIMESTAMP"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:63
msgid "Time"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:64
msgid "Interval"
msgstr ""

#: ../../source/doc.sqlalchemy.rst:69
msgid "Limitations"
msgstr "制限事項"

#: ../../source/doc.sqlalchemy.rst:71
msgid ""
"randog does not support all of sqlalchemy and RDB features. In "
"particular, please note the following:"
msgstr ""
"randog は sqlalchemy や RDB の全ての機能には対応していません。"
"とくに、下記の点に注意してください。"

#: ../../source/doc.sqlalchemy.rst:73
msgid "A factory CANNOT be generated if the model contains a relationship."
msgstr "モデルが relationship を含む場合、factory を作成できません。"

#: ../../source/doc.sqlalchemy.rst:75
msgid "Foreign key constraints are ignored."
msgstr "外部キー制約は無視されます。"

#: ../../source/doc.sqlalchemy.rst:77
msgid ""
"Even with unique constraints (includes primary key constraint), they are "
"ignored, so fields may be duplicated when values are generated "
"repeatedly. The probability of duplication is known to be greater than "
"intuition (`birthday problem "
"<https://en.wikipedia.org/wiki/Birthday_problem>`_)."
msgstr ""
"一意制約 (主キー制約を含む) があっても、それらは無視されるため、繰り返し生成する間にフィールドが重複する可能性があります。"
"重複する確率は直感よりも大きいことが知られています (`誕生日のパラドックス "
"<https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9>`_)。"

#: ../../source/doc.sqlalchemy.rst:79
msgid "Check constraints are ignored."
msgstr "チェック制約は無視されます。"

#: ../../source/doc.sqlalchemy.rst:83
msgid "Generate a model instance"
msgstr "モデルインスタンスの生成"

#: ../../source/doc.sqlalchemy.rst:85
msgid ""
"As shown in the example above, a dictionary type value is generated. "
"randog do not provide a feature to generate an instance of the model, but"
" this can be accomplished by using `post_process "
"<doc.construct_factories.html#processing-output>`_."
msgstr ""
"これまで示した例で作成した factory からはすべて辞書型の値が生成されます。"
"randog ではモデルインスタンスを生成する機能を提供していませんが、`post_process "
"<doc.construct_factories.html#processing-output>`_ を使うことで実現できます。"
