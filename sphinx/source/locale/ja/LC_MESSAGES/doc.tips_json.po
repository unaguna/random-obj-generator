# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, k-izumi
# This file is distributed under the same license as the
# random-obj-generator package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: random-obj-generator 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-11 16:20+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../source/doc.tips_json.rst:2
msgid "Create JSON randomly"
msgstr "JSON をランダムに生成する"

#: ../../source/doc.tips_json.rst:4
msgid ""
"Since python allows objects to be in JSON format by using `json "
"<https://docs.python.org/3/library/json.html>`_ module, objects generated"
" by randog can also be in JSON format."
msgstr ""
"python では `json "
"<https://docs.python.org/3/library/json.html>`_ モジュールを使えばオブジェクトをJSON形式にできるため、"
"randog で生成したオブジェクトもJSON形式にできます。"

#: ../../source/doc.tips_json.rst:19 ../../source/doc.tips_json.rst:45
msgid "In this case, for example, we get the following string:"
msgstr "このケースでは、例えば以下のような文字列を得られます。"

#: ../../source/doc.tips_json.rst:27
msgid "Decimal e.t.c."
msgstr "Decimal 等"

#: ../../source/doc.tips_json.rst:29
msgid ""
"Types such as Decimal cannot be converted to JSON by default, but can be "
"converted to JSON by specifying the :code:`default` function."
msgstr ""
"Decimal のような型はデフォルトでは JSON 形式に変換できませんが、"
":code:`default` 関数を指定することで JSON 形式に変換することができます。"

#: ../../source/doc.tips_json.rst:53
msgid "Factory of JSON string"
msgstr "JSON 文字列の Factory"

#: ../../source/doc.tips_json.rst:55
msgid ""
"In the previous examples, the objects generated by the factory were "
"converted to JSON, but it is also possible to create a factory that "
"outputs values in JSON format from the beginning by using "
":code:`post_process`."
msgstr ""
"上の例では factory が生成した値を JSON に変換していますが、"
":code:`post_process` を使うことであらかじめJSON形式に変換された値を生成する factory を作ることもできます。"

